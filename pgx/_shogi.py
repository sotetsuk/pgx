from functools import partial
from typing import Tuple

import jax
import jax.numpy as jnp

from pgx.flax.serialization import from_bytes
from pgx.flax.struct import dataclass

TRUE = jnp.bool_(True)
FALSE = jnp.bool_(False)


ACTION_SIZE = 2754
INIT_BOARD_BYTES = b"\xc8$\xc1\x01\x93\x92\x1dQ\xa5int32\xc5$\xb4\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
INIT_BOARD = from_bytes(jnp.zeros((29, 81), dtype=jnp.int32), INIT_BOARD_BYTES)
INIT_BOARD = jnp.array(INIT_BOARD)


# 指し手のdataclass
@dataclass
class ShogiAction:
    # 上の3つは移動と駒打ちで共用
    # 下の3つは移動でのみ使用
    # 駒打ちかどうか
    is_drop: bool
    # piece: 動かした(打った)駒の種類
    piece: int
    # final: 移動後の座標
    to: int
    # 移動前の座標
    from_: int = 0
    # captured: 取られた駒の種類。駒が取られていない場合は0
    captured: int = 0
    # is_promote: 駒を成るかどうかの判定
    is_promote: bool = False


# 盤面のdataclass
@dataclass
class ShogiState:
    # turn 先手番なら0 後手番なら1
    turn: int = 0
    # board 盤面の駒。
    # 空白,先手歩,先手香車,先手桂馬,先手銀,先手角,先手飛車,先手金,先手玉,先手と,先手成香,先手成桂,先手成銀,先手馬,先手龍,
    # 後手歩,後手香車,後手桂馬,後手銀,後手角,後手飛車,後手金,後手玉,後手と,後手成香,後手成桂,後手成銀,後手馬,後手龍
    # の順で駒がどの位置にあるかをone_hotで記録
    board: jnp.ndarray = jnp.zeros((29, 81), dtype=jnp.int32)
    # hand 持ち駒。先手歩,先手香車,先手桂馬,先手銀,先手角,先手飛車,先手金,後手歩,後手香車,後手桂馬,後手銀,後手角,後手飛車,後手金
    # の14種の値を増減させる
    hand: jnp.ndarray = jnp.zeros(14, dtype=jnp.int32)
    # legal_actions_black/white: 自殺手や王手放置などの手も含めた合法手の一覧
    legal_actions_black: jnp.ndarray = jnp.zeros(2754, dtype=jnp.int32)
    legal_actions_white: jnp.ndarray = jnp.zeros(2754, dtype=jnp.int32)


def init() -> ShogiState:
    board = INIT_BOARD
    state = ShogiState(board=board, hand=jnp.zeros(14, dtype=jnp.int32))  # type: ignore
    return _init_legal_actions(state)


def step(state: ShogiState, action: int) -> Tuple[ShogiState, int, bool]:
    # state, 勝敗判定,終了判定を返す
    legal_actions = _legal_actions(state)
    _action = _dlaction_to_action(action, state)

    # actionのfromが盤外の場合は非合法手なので負け
    is_oob = ~_is_in_board(_action.from_)
    is_illegal = legal_actions[action] == 0
    state1 = state

    # 合法手の場合
    state = jax.lax.cond(
        _action.is_drop,
        lambda: _drop(_update_legal_drop_actions(state, _action), _action),
        lambda: _move(_update_legal_move_actions(state, _action), _action),
    )

    # 王手がかかったままの場合、王手放置また自殺手で負け
    cn, cnp, cf, cfp = _is_check(state)
    is_check = cn + cf != 0
    is_double_pawn = _is_double_pawn(state)
    is_stuck = _is_stuck(state)
    state2 = state

    state = state.replace(turn=_another_color(state))  # type: ignore

    # 相手に合法手がない場合→詰み
    is_mate = _is_mate(state)
    state, reward, terminated = jax.lax.cond(
        is_mate,
        lambda: jax.lax.cond(
            (_action.is_drop & ((_action.piece == 1) | (_action.piece == 15))),
            # actionのis_dropがTrueかつpieceが歩の場合、打ち歩詰めで負け
            lambda: (state, _turn_to_reward(state.turn), True),
            # そうでなければ普通の詰みで勝ち
            lambda: (state, _turn_to_reward(_another_color(state)), True),
        ),
        lambda: (state, 0, False),
    )
    # 反則負け
    state, reward, terminated = jax.lax.cond(
        (is_check | is_double_pawn | is_stuck),
        lambda: (state2, _turn_to_reward(_another_color(state2)), True),
        lambda: (state, reward, terminated),
    )
    # 反則負け
    state, reward, terminated = jax.lax.cond(
        (is_oob | is_illegal),
        lambda: (state1, _turn_to_reward(_another_color(state1)), True),
        lambda: (state, reward, terminated),
    )
    return state, reward, terminated


# turnから報酬計算
def _turn_to_reward(turn: int):
    return jnp.int32([1, -1])[turn]


def _pawn_move(turn: int) -> jnp.ndarray:
    array = jnp.zeros((9, 9), dtype=jnp.int32)
    array = array.at[4, 4 - _turn_to_reward(turn)].set(1)
    return array


def _knight_move(turn: int) -> jnp.ndarray:
    array = jnp.zeros((9, 9), dtype=jnp.int32)
    array = array.at[3, 4 - 2 * _turn_to_reward(turn)].set(1)
    array = array.at[5, 4 - 2 * _turn_to_reward(turn)].set(1)
    return array


def _silver_move(turn: int) -> jnp.ndarray:
    array = _pawn_move(turn)
    array = array.at[3, 3].set(1)
    array = array.at[3, 5].set(1)
    array = array.at[5, 3].set(1)
    array = array.at[5, 5].set(1)
    return array


def _gold_move(turn: int) -> jnp.ndarray:
    array = jnp.zeros((9, 9), dtype=jnp.int32)
    array = jax.lax.cond(
        turn == 0,
        lambda: array.at[3, 3].set(1).at[5, 3].set(1),
        lambda: array.at[3, 5].set(1).at[5, 5].set(1),
    )
    array = array.at[4, 3].set(1)
    array = array.at[3, 4].set(1)
    array = array.at[4, 5].set(1)
    array = array.at[5, 4].set(1)
    return array


def _king_move() -> jnp.ndarray:
    array = jnp.zeros((9, 9), dtype=jnp.int32)
    array = array.at[3:6, 3:6].set(1)
    array = array.at[4, 4].set(0)
    return array


# 端判定
def _is_side(point: int) -> Tuple[bool, bool, bool, bool]:
    is_up = point % 9 == 0
    is_down = point % 9 == 8
    is_left = point >= 72
    is_right = point <= 8
    return is_up, is_down, is_left, is_right


# 桂馬用
def _is_second_line(point: int) -> Tuple[bool, bool]:
    u = point % 9 <= 1
    d = point % 9 >= 7
    return u, d


# point(0~80)を座標((0, 0)~(8, 8))に変換
def _point_to_location(point: int) -> Tuple[int, int]:
    return point // 9, point % 9


# 端にいる駒の動けない地点へのフラグを折る
def _cut_outside(array: jnp.ndarray, point: int) -> jnp.ndarray:
    u, d, l, r = _is_side(point)
    u2, d2 = _is_second_line(point)
    # (4, 4)での動きを基準にはみ出すところをカットする
    array = jax.lax.cond(u, lambda: array.at[:, 3].set(0), lambda: array)
    array = jax.lax.cond(d, lambda: array.at[:, 5].set(0), lambda: array)
    array = jax.lax.cond(r, lambda: array.at[3, :].set(0), lambda: array)
    array = jax.lax.cond(l, lambda: array.at[5, :].set(0), lambda: array)
    array = jax.lax.cond(u2, lambda: array.at[:, 2].set(0), lambda: array)
    array = jax.lax.cond(d2, lambda: array.at[:, 6].set(0), lambda: array)
    return array


# 駒種と位置から到達できる地点をすべて生成
def _action_board(array: jnp.ndarray, point: int) -> jnp.ndarray:
    y, t = _point_to_location(point)
    array = _cut_outside(array, point)
    return jnp.roll(array, (y - 4, t - 4), axis=(0, 1)).reshape(81)


# 大駒・香車以外の位置ごとの移動できる地点を記録
POINT_MOVES = jnp.zeros((81, 29, 81), dtype=jnp.int32)
for i in range(81):
    POINT_MOVES = POINT_MOVES.at[i, 1].set(_action_board(_pawn_move(0), i))
    POINT_MOVES = POINT_MOVES.at[i, 3].set(_action_board(_knight_move(0), i))
    POINT_MOVES = POINT_MOVES.at[i, 4].set(_action_board(_silver_move(0), i))
    POINT_MOVES = POINT_MOVES.at[i, 7].set(_action_board(_gold_move(0), i))
    POINT_MOVES = POINT_MOVES.at[i, 8].set(_action_board(_king_move(), i))
    POINT_MOVES = POINT_MOVES.at[i, 9].set(POINT_MOVES[i][7])
    POINT_MOVES = POINT_MOVES.at[i, 10].set(POINT_MOVES[i][7])
    POINT_MOVES = POINT_MOVES.at[i, 11].set(POINT_MOVES[i][7])
    POINT_MOVES = POINT_MOVES.at[i, 12].set(POINT_MOVES[i][7])
    POINT_MOVES = POINT_MOVES.at[i, 15].set(_action_board(_pawn_move(1), i))
    POINT_MOVES = POINT_MOVES.at[i, 17].set(_action_board(_knight_move(1), i))
    POINT_MOVES = POINT_MOVES.at[i, 18].set(_action_board(_silver_move(1), i))
    POINT_MOVES = POINT_MOVES.at[i, 21].set(_action_board(_gold_move(1), i))
    POINT_MOVES = POINT_MOVES.at[i, 22].set(_action_board(_king_move(), i))
    POINT_MOVES = POINT_MOVES.at[i, 23].set(POINT_MOVES[i][21])
    POINT_MOVES = POINT_MOVES.at[i, 24].set(POINT_MOVES[i][21])
    POINT_MOVES = POINT_MOVES.at[i, 25].set(POINT_MOVES[i][21])
    POINT_MOVES = POINT_MOVES.at[i, 26].set(POINT_MOVES[i][21])


# dlshogiのactionはdirection(動きの方向)とto（駒の処理後の座標）に依存
def _dlshogi_action(direction: int, to: int) -> int:
    return direction * 81 + to


# from, toが同じ縦列にあるかどうか
def _is_same_column(_from: int, to: int) -> bool:
    return _from // 9 == to // 9


# from, toが同じ横列にあるかどうか
def _is_same_row(_from: int, to: int) -> bool:
    return _from % 9 == to % 9


# from, toが右肩上がりの斜め方向で同じ筋にあるか
def _is_same_rising(_from: int, to: int) -> bool:
    return _from // 9 - _from % 9 == to // 9 - to % 9


# from, toが右肩下がりの斜め方向で同じ筋にあるか
def _is_same_declining(_from: int, to: int) -> bool:
    return _from // 9 + _from % 9 == to // 9 + to % 9


# from, からdirectionの方向に行ったときにtoに到達できるか
def _is_same_line(from_: int, to: int, direction: int):
    dir = direction % 10
    return jnp.bool_(
        [
            _is_same_column(from_, to),  # 0
            _is_same_declining(from_, to),  # 1
            _is_same_rising(from_, to),  # 2
            _is_same_row(from_, to),  # 3
            _is_same_row(from_, to),  # 4
            _is_same_column(from_, to),  # 5
            _is_same_rising(from_, to),  # 6
            _is_same_declining(from_, to),  # 7
            False,  # 8
            False,  # 9
        ]
    )[dir]


# TODO: cache
# fromからある方向に移動させたときの位置と距離の関係
# それ以上その方向に動かせないなら全部0
def _dis_direction_array(from_: int, turn: int, direction: int) -> jnp.ndarray:
    array = jnp.zeros(81, dtype=jnp.int32)
    dif = _direction_to_dif(direction, turn)

    def update_arr(i, array):
        dis = 1 + i
        to = from_ + dif * dis
        return jax.lax.cond(
            _is_in_board(to) & _is_same_line(from_, to, direction),
            lambda: array.at[to].set(dis),
            lambda: array,
        )

    array = jax.lax.fori_loop(0, 8, update_arr, array)
    return array


# TODO: cache
# fromの座標とtoの座標からdirを生成
def _point_to_direction(_from: int, to: int, promote: bool, turn: int) -> int:
    # 後手番の動きは反転させる
    dis = (to - _from) * jnp.int32([1, -1])[turn]
    # UP, UP_LEFT, UP_RIGHT, LEFT, RIGHT, DOWN, DOWN_LEFT, DOWN_RIGHT, UP2_LEFT, UP2_RIGHT, UP_PROMOTE...
    # の順でdirを割り振る
    # PROMOTEの場合は+10する処理を入れる
    direction = -1
    direction = jax.lax.cond(
        _is_same_column(_from, to) & (dis < 0), lambda: 0, lambda: direction
    )
    direction = jax.lax.cond(
        _is_same_declining(_from, to) & (dis > 0), lambda: 1, lambda: direction
    )
    direction = jax.lax.cond(
        _is_same_rising(_from, to) & (dis < 0), lambda: 2, lambda: direction
    )
    direction = jax.lax.cond(
        _is_same_row(_from, to) & (dis > 0), lambda: 3, lambda: direction
    )
    direction = jax.lax.cond(
        _is_same_row(_from, to) & (dis < 0), lambda: 4, lambda: direction
    )
    direction = jax.lax.cond(
        _is_same_column(_from, to) & (dis > 0), lambda: 5, lambda: direction
    )
    direction = jax.lax.cond(
        _is_same_rising(_from, to) & (dis > 0), lambda: 6, lambda: direction
    )
    direction = jax.lax.cond(
        _is_same_declining(_from, to) & (dis < 0), lambda: 7, lambda: direction
    )
    direction = jax.lax.cond(
        (dis == 7) & ~_is_same_column(_from, to), lambda: 8, lambda: direction
    )
    direction = jax.lax.cond(
        (dis == -11) & ~_is_same_column(_from, to),
        lambda: 9,
        lambda: direction,
    )
    direction = jax.lax.cond(
        promote, lambda: direction + 10, lambda: direction
    )
    return direction


# TODO: cache
# 打った駒の種類をdirに変換
def _hand_to_direction(piece: int) -> int:
    # 移動のdirはPROMOTE_UP_RIGHT2の19が最大なので20以降に配置
    # 20: 先手歩 21: 先手香車... 33: 後手金　に対応させる
    return jax.lax.cond(piece <= 14, lambda: 19 + piece, lambda: 12 + piece)


# ShogiActionをdlshogiのint型actionに変換
def _action_to_dlaction(action: ShogiAction, turn: int):
    return jax.lax.cond(
        action.is_drop,
        lambda: _dlshogi_action(_hand_to_direction(action.piece), action.to),
        lambda: _dlshogi_action(
            _point_to_direction(
                action.from_, action.to, action.is_promote, turn
            ),
            action.to,
        ),
    )


# dlshogiのint型actionをdirectionとtoに分解
def _separate_dlaction(action: int) -> Tuple[int, int]:
    # direction, to の順番
    return action // 81, action % 81


# directionからfromがtoからどれだけ離れてるかを返す
def _direction_to_dif(direction: int, turn: int):
    direction = direction % 10
    dif = jnp.int32([-1, 8, -10, 9, -9, 1, 10, -8, 7, -11])[direction]
    return dif * jnp.int32([1, -1])[turn]


# directionとto,stateから大駒含めた移動のfromの位置を割り出す
# 成りの移動かどうかも返す
def _direction_to_from(
    direction: int, to: int, state: ShogiState
) -> Tuple[int, bool]:
    dif = _direction_to_dif(direction, state.turn)
    f = to
    _from = -1
    for i in range(8):
        f -= dif
        _from = jax.lax.cond(
            _is_in_board(f) & (_from == -1) & (_piece_type(state, f) != 0),
            lambda: f,
            lambda: _from,
        )
    return _from, direction >= 10


# TODO: cache
def _direction_to_hand(direction: int) -> int:
    return jax.lax.cond(
        direction <= 26,
        lambda: direction - 19,  # direction:20が先手の歩（pieceの1）に対応
        lambda: direction - 12,  # direction:27が後手の歩（pieceの15）に対応
    )


def _piece_type(state: ShogiState, point: int):
    return state.board[:, point].argmax()


# dlshogiのactionの情報をShogiActionの情報に変換
def _dlshogi_move_action(
    direction: int, to: int, state: ShogiState
) -> ShogiAction:
    _from, is_promote = _direction_to_from(direction, to, state)
    piece = _piece_type(state, _from)
    captured = _piece_type(state, to)
    return ShogiAction(False, piece, to, _from, captured, is_promote)  # type: ignore


def _dlshogi_drop_action(
    direction: int, to: int, state: ShogiState
) -> ShogiAction:
    piece = _direction_to_hand(direction)
    return ShogiAction(True, piece, to)  # type: ignore


def _dlaction_to_action(action: int, state: ShogiState) -> ShogiAction:
    direction, to = _separate_dlaction(action)
    return jax.lax.cond(
        direction <= 19,
        lambda: _dlshogi_move_action(direction, to, state),
        lambda: _dlshogi_drop_action(direction, to, state),
    )


# 手番側でない色を返す
def _another_color(state: ShogiState) -> int:
    return (state.turn + 1) % 2


# pointが盤面内かどうか
def _is_in_board(point: int) -> bool:
    return (0 <= point) & (point <= 80)


# 相手の駒を同じ種類の自分の駒に変換する
def _convert_piece(piece: int) -> int:
    p = (piece + 14) % 28
    return jax.lax.cond(
        piece == 0,
        lambda: 0,
        lambda: jax.lax.cond(p == 0, lambda: 28, lambda: p),
    )


# 駒から持ち駒への変換
# 先手歩が0、後手金が13
def _piece_to_hand(piece: int):
    p = jax.lax.cond(
        (piece % 14 == 0) | (piece % 14 >= 9), lambda: piece - 8, lambda: piece
    )
    return jax.lax.cond(p < 15, lambda: p - 1, lambda: p - 8)


# ある駒の持ち主を返す
def _owner(piece):
    return jax.lax.cond(piece == 0, lambda: 2, lambda: (piece - 1) // 14)


# 盤面のどこに何の駒があるかをnp.arrayに移したもの
# 同じ座標に複数回piece_typeを使用する場合はこちらを使った方が良い
def _board_status(state: ShogiState) -> jnp.ndarray:
    return state.board.argmax(axis=0)


# 駒の持ち主の判定
def _pieces_owner(state: ShogiState) -> jnp.ndarray:
    pieces = state.board.argmax(axis=0)
    return jax.vmap(_owner)(pieces)


# 駒の移動の盤面変換
def _move(
    state: ShogiState,
    action: ShogiAction,
) -> ShogiState:
    board = state.board
    hand = state.hand
    board = board.at[action.piece, action.from_].set(0)
    board = board.at[0, action.from_].set(1)
    board = board.at[action.captured, action.to].set(0)
    board = jax.lax.cond(
        action.is_promote,
        lambda: board.at[action.piece + 8, action.to].set(1),
        lambda: board.at[action.piece, action.to].set(1),
    )
    hand = jax.lax.cond(
        action.captured != 0,
        lambda: hand.at[_piece_to_hand(_convert_piece(action.captured))].add(
            1
        ),
        lambda: hand,
    )
    return state.replace(board=board, hand=hand)  # type: ignore


def _drop(state: ShogiState, action: ShogiAction) -> ShogiState:
    board, hand = state.board, state.hand
    hand = hand.at[_piece_to_hand(action.piece)].add(-1)
    board = board.at[action.piece, action.to].set(1)
    board = board.at[0, action.to].set(0)
    return state.replace(board=board, hand=hand)  # type: ignore


# 方向ごとの大ごまの動きのなかで一番奥の地点を返す
def _inner_point(bs_one: jnp.ndarray, from_: int, direction: int):
    dir_array = _dis_direction_array(from_, 0, direction)
    # 途中で駒にぶつからない場合
    return jax.lax.cond(
        jnp.all(dir_array * bs_one == 0),
        lambda: from_ + _direction_to_dif(direction, 0) * jnp.max(dir_array),
        lambda: _nearest_position(from_, direction, bs_one),
    )


# TODO: cache
# fromからtoまでの地点をdifごとに1に置き換える
# 最大8回
# fromは0、toは1に
def _change_between(from_: int, to: int, dif: int) -> jnp.ndarray:
    array = jnp.zeros(81, dtype=jnp.int32)
    ix = jnp.arange(81)
    return jax.lax.cond(
        0 < dif,
        lambda: jnp.where(
            (from_ < ix) & (ix <= to) & ((ix - from_) % dif == 0), 1, array
        ),
        lambda: jnp.where(
            (ix < from_) & (to <= ix) & ((ix - from_) % dif == 0), 1, array
        ),
    )


# 香車の動き
def _lance_move(bs: jnp.ndarray, from_: int, turn: int) -> jnp.ndarray:
    bs_one = jnp.where(bs == 0, 0, 1)
    direction = 5 * turn
    point = _inner_point(bs_one, from_, direction)
    return _change_between(from_, point, _direction_to_dif(0, turn))


# 角の動き
def _bishop_move(bs: jnp.ndarray, from_: int) -> jnp.ndarray:
    to = jnp.zeros(81, dtype=jnp.int32)
    bs_one = jnp.where(bs == 0, 0, 1)
    ur_point = _inner_point(bs_one, from_, 2)
    to += _change_between(from_, ur_point, -10)
    ul_point = _inner_point(bs_one, from_, 1)
    to += _change_between(from_, ul_point, 8)
    dr_point = _inner_point(bs_one, from_, 7)
    to += _change_between(from_, dr_point, -8)
    dl_point = _inner_point(bs_one, from_, 6)
    to += _change_between(from_, dl_point, 10)
    return to


# 飛車の動き
def _rook_move(bs: jnp.ndarray, from_: int) -> jnp.ndarray:
    to = jnp.zeros(81, dtype=jnp.int32)
    bs_one = jnp.where(bs == 0, 0, 1)
    u_point = _inner_point(bs_one, from_, 0)
    to += _change_between(from_, u_point, -1)
    d_point = _inner_point(bs_one, from_, 5)
    to += _change_between(from_, d_point, 1)
    r_point = _inner_point(bs_one, from_, 4)
    to += _change_between(from_, r_point, -9)
    l_point = _inner_point(bs_one, from_, 3)
    to += _change_between(from_, l_point, 9)
    return to


# 馬の動き
def _horse_move(bs: jnp.ndarray, from_: int) -> jnp.ndarray:
    # 角の動き＋玉の動き
    to = _bishop_move(bs, from_) + POINT_MOVES[from_][8]
    return jnp.where(to == 0, 0, 1)


# 龍の動き
def _dragon_move(bs: jnp.ndarray, from_: int) -> jnp.ndarray:
    # 飛車の動き＋玉の動き
    to = _rook_move(bs, from_) + POINT_MOVES[from_][8]
    return jnp.where(to == 0, 0, 1)


# 駒種と位置から到達できる場所を返す
def _piece_moves(bs: jnp.ndarray, piece, point) -> jnp.ndarray:
    moves = POINT_MOVES[point][piece]
    # 香車の動き
    moves = jax.lax.cond(
        piece == 2, lambda: _lance_move(bs, point, 0), lambda: moves
    )
    moves = jax.lax.cond(
        piece == 16, lambda: _lance_move(bs, point, 1), lambda: moves
    )
    # 角の動き
    is_bishop = (piece == 5) | (piece == 19)
    moves = jax.lax.cond(
        is_bishop, lambda: _bishop_move(bs, point), lambda: moves
    )
    # 飛車の動き
    is_rook = (piece == 6) | (piece == 20)
    moves = jax.lax.cond(is_rook, lambda: _rook_move(bs, point), lambda: moves)
    # 馬の動き
    is_horse = (piece == 13) | (piece == 27)
    moves = jax.lax.cond(
        is_horse, lambda: _horse_move(bs, point), lambda: moves
    )
    # 龍の動き
    is_dragon = (piece == 14) | (piece == 28)
    moves = jax.lax.cond(
        is_dragon, lambda: _dragon_move(bs, point), lambda: moves
    )
    return moves


# 小駒のactionのみを返すpiece_moves
def _small_piece_moves(piece, point) -> jnp.ndarray:
    return POINT_MOVES[point][piece]


# 敵陣かどうか
def _is_enemy_zone(turn: int, point: int):
    return jnp.bool_([point % 9 <= 2, point % 9 >= 6])[turn]


# 成れるかどうか
def _can_promote(piece: int, _from: int, to: int):
    can_promote = (piece % 14 <= 6) & (piece % 14 != 0)
    can_promote &= _is_enemy_zone(_owner(piece), _from) | _is_enemy_zone(
        _owner(piece), to
    )
    return can_promote


def _create_one_piece_actions(
    piece: int, _from: int, to: int, actions: jnp.ndarray
) -> jnp.ndarray:
    normal_dir = _point_to_direction(_from, to, False, _owner(piece))
    normal_act = _dlshogi_action(normal_dir, to)
    actions = actions.at[normal_act].set(1)
    pro_dir = _point_to_direction(_from, to, True, _owner(piece))
    pro_act = _dlshogi_action(pro_dir, to)
    actions = jax.lax.cond(
        _can_promote(piece, _from, to),
        lambda: actions.at[pro_act].set(1),
        lambda: actions,
    )
    return actions


def _create_actions(piece, _from, to: jnp.ndarray) -> jnp.ndarray:
    actions = jnp.zeros(2754, dtype=jnp.int32)

    def add_action(i, actions):
        return jax.lax.cond(
            to[i] != 0,
            lambda: _create_one_piece_actions(piece, _from, i, actions),
            lambda: actions,
        )

    actions = jax.lax.fori_loop(0, 81, add_action, actions)
    return actions


def _create_piece_actions(piece, _from) -> jnp.ndarray:
    return _create_actions(piece, _from, POINT_MOVES[_from][piece])


# actionを追加する
def _add_action(
    add_array: jnp.ndarray, origin_array: jnp.ndarray
) -> jnp.ndarray:
    return jnp.where(add_array == 1, 1, origin_array)


# actionを削除する
def _filter_action(
    filter_array: jnp.ndarray, origin_array: jnp.ndarray
) -> jnp.ndarray:
    return jnp.where(filter_array == 1, 0, origin_array)


# 駒の種類と位置から生成できるactionのフラグを立てる
def _add_move_actions(piece, _from, array: jnp.ndarray) -> jnp.ndarray:
    actions = _create_piece_actions(piece, _from)
    return jnp.where(actions == 1, 1, array)


# 駒の種類と位置から生成できるactionのフラグを折る
def _filter_move_actions(piece, _from, array: jnp.ndarray) -> jnp.ndarray:
    actions = _create_piece_actions(piece, _from)
    return jnp.where(actions == 1, 0, array)


# 駒打ちのactionを追加する
def _add_drop_actions(piece: int, array: jnp.ndarray) -> jnp.ndarray:
    direction = _hand_to_direction(piece)
    idx = jnp.arange(ACTION_SIZE)
    array = jnp.where(
        (81 * direction <= idx) & (idx < 81 * (direction + 1)), 1, array
    )
    return array


# 駒打ちのactionのフラグを折る
def _filter_drop_actions(piece: int, array: jnp.ndarray) -> jnp.ndarray:
    direction = _hand_to_direction(piece)
    ix = jnp.arange(2754)
    array = jnp.where(
        (81 * direction <= ix) & (ix < 81 * (direction + 1)), 0, array
    )
    return array


# stateからblack,white両方のlegal_actionsを生成する
# 普段は使わないがlegal_actionsが設定されていない場合に使用
def _init_legal_actions(state: ShogiState) -> ShogiState:
    pieces = _board_status(state)

    # 移動の追加
    def add_black_moves(i, legal_actions_black):
        return jax.lax.cond(
            pieces[i] <= 14,
            lambda: _add_move_actions(pieces[i], i, legal_actions_black),
            lambda: legal_actions_black,
        )

    def add_white_moves(i, legal_actions_white):
        return jax.lax.cond(
            pieces[i] > 14,
            lambda: _add_move_actions(pieces[i], i, legal_actions_white),
            lambda: legal_actions_white,
        )

    legal_actions_black = jax.lax.fori_loop(
        0, 81, add_black_moves, state.legal_actions_black
    )
    legal_actions_white = jax.lax.fori_loop(
        0, 81, add_white_moves, state.legal_actions_white
    )

    def add_black_drops(i, legal_actions_black):
        return jax.lax.cond(
            state.hand[i] != 0,
            lambda: _add_drop_actions(1 + i, legal_actions_black),
            lambda: legal_actions_black,
        )

    def add_white_drops(i, legal_actions_white):
        return jax.lax.cond(
            state.hand[i + 7] != 0,
            lambda: _add_drop_actions(15 + i, legal_actions_white),
            lambda: legal_actions_white,
        )

    # 駒打ちの追加
    legal_actions_black = jax.lax.fori_loop(
        0, 7, add_black_drops, legal_actions_black
    )
    legal_actions_white = jax.lax.fori_loop(
        0, 7, add_white_drops, legal_actions_white
    )
    return state.replace(legal_actions_black=legal_actions_black, legal_actions_white=legal_actions_white)  # type: ignore


# 成駒を成る前の駒に変更
def _degeneration_piece(piece: int) -> int:
    return jax.lax.cond(
        (piece % 14 >= 9) | (piece == 14) | (piece == 28),
        lambda: piece - 8,
        lambda: piece,
    )


# 駒の移動によるlegal_actionsの更新
def _update_legal_move_actions(
    state: ShogiState, action: ShogiAction
) -> ShogiState:
    player_actions, enemy_actions = jax.lax.cond(
        state.turn == 0,
        lambda: (state.legal_actions_black, state.legal_actions_white),
        lambda: (state.legal_actions_white, state.legal_actions_black),
    )
    # 元の位置にいたときのフラグを折る
    player_actions = _filter_move_actions(
        action.piece, action.from_, player_actions
    )
    # 移動後の位置からの移動のフラグを立てる
    piece = jax.lax.cond(
        action.is_promote, lambda: action.piece + 8, lambda: action.piece
    )
    player_actions = _add_move_actions(piece, action.to, player_actions)
    # 取った駒を自分の持ち駒に変換
    # 取っていない場合は0
    captured = _degeneration_piece(_convert_piece(action.captured))
    # 駒が取られた場合、相手の取られた駒によってできていたactionのフラグを折る
    enemy_actions = jax.lax.cond(
        action.captured != 0,
        lambda: _filter_move_actions(
            action.captured, action.to, enemy_actions
        ),
        lambda: enemy_actions,
    )
    player_actions = jax.lax.cond(
        action.captured != 0,
        lambda: _add_drop_actions(captured, player_actions),
        lambda: player_actions,
    )

    legal_actions_black, legal_actions_white = jax.lax.cond(
        state.turn == 0,
        lambda: (player_actions, enemy_actions),
        lambda: (enemy_actions, player_actions),
    )
    return state.replace(legal_actions_black=legal_actions_black, legal_actions_white=legal_actions_white)  # type: ignore


# 駒打ちによるlegal_actionsの更新
def _update_legal_drop_actions(
    state: ShogiState, action: ShogiAction
) -> ShogiState:
    player_actions = jax.lax.cond(
        state.turn == 0,
        lambda: state.legal_actions_black,
        lambda: state.legal_actions_white,
    )
    # 移動後の位置からの移動のフラグを立てる
    player_actions = _add_move_actions(action.piece, action.to, player_actions)
    # 持ち駒がもうない場合、その駒を打つフラグを折る
    player_actions = jax.lax.cond(
        state.hand[_piece_to_hand(action.piece)] == 1,
        lambda: _filter_drop_actions(action.piece, player_actions),
        lambda: player_actions,
    )
    return jax.lax.cond(
        state.turn == 0,
        lambda: state.replace(legal_actions_black=player_actions),  # type: ignore
        lambda: state.replace(legal_actions_white=player_actions),  # type: ignore
    )


# 自分の駒がある位置への移動を除く
def _filter_my_piece_move_actions(
    turn: int, owner: jnp.ndarray, array: jnp.ndarray
) -> jnp.ndarray:
    actions = array.reshape(34, 81)
    mask = jnp.tile(owner == turn, reps=(34, 1))
    mask = mask.at[20:].set(False)
    actions = jnp.where(mask, 0, actions)
    return actions.flatten()


# 駒がある地点への駒打ちを除く
def _filter_occupied_drop_actions(
    turn: int, owner: jnp.ndarray, array: jnp.ndarray
) -> jnp.ndarray:
    """
    x x x x x x x x x
    x x x x x x x x x
    --- 20
    x x x x F x x x x
    x x x x F x x x x
    --- 27
    x x x x x x x x x
    x x x x x x x x x
    """
    actions = array.reshape(34, 81)
    mask1 = jnp.tile(owner != 2, reps=(34, 1))
    s = jnp.int32([20, 27])[turn]
    ix = jnp.arange(34)
    mask2 = jnp.tile((s <= ix) & (ix < s + 7), (81, 1)).transpose()
    mask = mask1 & mask2
    actions = jnp.where(mask, 0, actions)
    return actions.flatten()


# boardのlegal_actionsを利用して合法手を生成する
# 大駒や香車の利きはboardのlegal_actionsに追加していないので、ここで追加する
# 自殺手や反則手はここでは除かない
def _legal_actions(state: ShogiState) -> jnp.ndarray:
    actions = jax.lax.cond(
        state.turn == 0,
        lambda: state.legal_actions_black,
        lambda: state.legal_actions_white,
    )
    pieces = _board_status(state)
    own = _pieces_owner(state)

    # TODO: vectorize
    def add_action(i, actions):
        return jax.lax.cond(
            _owner(pieces[i]) == state.turn,
            lambda: _add_action(
                _create_actions(
                    pieces[i], i, _piece_moves(pieces, pieces[i], i)
                ),
                actions,
            ),
            lambda: actions,
        )

    actions = jax.lax.fori_loop(0, 81, add_action, actions)
    # 自分の駒がある位置への移動actionを除く
    actions = _filter_my_piece_move_actions(state.turn, own, actions)
    # 駒がある地点への駒打ちactionを除く
    actions = _filter_occupied_drop_actions(state.turn, own, actions)
    return actions


# 王手判定
# 密接・遠隔の王手で分ける
def _is_check(state: ShogiState) -> Tuple[int, jnp.ndarray, int, jnp.ndarray]:
    return jax.lax.cond(
        jnp.all(state.board[8 + 14 * state.turn] == 0),
        # そもそも王がいない場合
        lambda: (
            0,
            jnp.zeros(81, dtype=jnp.int32),
            0,
            jnp.zeros(81, dtype=jnp.int32),
        ),
        lambda: _is_check_(state),
    )


# 玉がいる前提
def _is_check_(state: ShogiState):
    check = 0
    checking_point = jnp.zeros((2, 81), dtype=jnp.int32)
    king_point = state.board[8 + 14 * state.turn, :].argmax()
    near_king = _small_piece_moves(8 + 14 * state.turn, king_point)
    pieces = _board_status(state)

    def update_check(i, x):
        check, checking_point = x
        flag = (_owner(pieces[i]) == _another_color(state)) & (
            _piece_moves(pieces, pieces[i], i)[king_point] == 1
        )
        # 桂馬の王手も密接としてカウント
        flag2 = (near_king[i] == 1) | (pieces[i] % 14 == 3)
        check = jax.lax.cond(
            flag,
            lambda: jax.lax.cond(
                flag2, lambda: check + 10, lambda: check + 1  # 遠隔の王手は9以上ありえない
            ),
            lambda: check,
        )
        checking_point = jax.lax.cond(
            flag,
            lambda: jax.lax.cond(
                flag2,
                lambda: checking_point.at[0, i].set(1),
                lambda: checking_point.at[1, i].set(1),  # 遠隔の王手は9以上ありえない
            ),
            lambda: checking_point,
        )
        return check, checking_point

    check, checking_point = jax.lax.fori_loop(
        0, 81, update_check, (check, checking_point)
    )

    return check // 10, checking_point[0], check % 10, checking_point[1]


# 二歩判定
# 手番側でチェックする
def _is_double_pawn(state: ShogiState):
    bs = _board_status(state)
    is_pawn = bs.reshape(9, 9) == 1 + state.turn * 14
    return ((is_pawn).sum(axis=1) >= 2).any()


# 行き所のない駒判定
def _is_stuck(state: ShogiState):
    is_stuck = jnp.bool_(False)
    bs = _board_status(state)
    line1 = bs[0::9]
    is_stuck |= jnp.all(jnp.any(line1 == 1))
    is_stuck |= jnp.all(jnp.any(line1 == 2))
    is_stuck |= jnp.all(jnp.any(line1 == 3))
    line2 = bs[1::9]
    is_stuck |= jnp.all(jnp.any(line2 == 3))
    line8 = bs[7::9]
    is_stuck |= jnp.all(jnp.any(line8 == 17))
    line9 = bs[8::9]
    is_stuck |= jnp.all(jnp.any(line9 == 15))
    is_stuck |= jnp.all(jnp.any(line9 == 16))
    is_stuck |= jnp.all(jnp.any(line9 == 17))
    return is_stuck


# pinされている方向から縦、横、右斜めうえ、右斜め下の四方向に分類
def _direction_to_pin(direction: int):
    # assert direction < 8
    return jnp.int32([1, 2, 3, 4, 4, 1, 3, 2])[direction]


# それぞれの方向について、1番fromに近い駒の位置を返す
def _nearest_position(from_: int, direction: int, bs_one: jnp.ndarray):
    dif = _direction_to_dif(direction, 0)

    @jax.vmap
    def is_ok(point):
        return (
            _is_in_board(point)
            & _is_same_line(from_, point, direction)
            & (bs_one[point] == 1)
        )

    idxs = jnp.arange(8)
    points = from_ + (1 + idxs) * dif
    is_oks = is_ok(points)

    min_ix = jnp.argmax(is_oks)
    return points[min_ix]


# pinされている駒の位置と方向を記録(1方向のみ)
def _direction_pin(
    bs: jnp.ndarray,
    turn,
    king_point,
    direction,
    array: jnp.ndarray,
) -> jnp.ndarray:
    e_turn = (turn + 1) % 2
    bs_one = jnp.where(bs == 0, 0, 1)
    # 玉に一番近い駒の位置
    point1 = _nearest_position(king_point, direction, bs_one)
    # 2番目に近い駒の位置
    point2 = _nearest_position(point1, direction, bs_one)
    piece1 = bs[point1]
    piece2 = bs[point2]
    arr1 = array

    flag = (piece2 == 2 + 14 * e_turn) & (direction == 5 * turn)
    flag |= ((piece2 == 6 + e_turn * 14) | (piece2 == 14 + e_turn * 14)) & (
        (direction == 0)
        | (direction == 3)
        | (direction == 4)
        | (direction == 5)
    )
    flag |= ((piece2 == 5 + e_turn * 14) | (piece2 == 13 + e_turn * 14)) & (
        (direction == 1)
        | (direction == 2)
        | (direction == 6)
        | (direction == 7)
    )
    arr2 = jax.lax.cond(
        flag,
        lambda: array.at[point1].set(_direction_to_pin(direction)),
        lambda: array,
    )

    return jax.lax.cond(
        ((point1 == -1) | (point2 == -1)) | (_owner(piece1) != turn),
        lambda: arr1,
        lambda: arr2,
    )


# pinされている駒の位置と方向を記録
def _pin(state: ShogiState) -> jnp.ndarray:
    bs = _board_status(state)
    turn = state.turn
    pins = jnp.zeros(81, dtype=jnp.int32)
    king_point = state.board[8 + 14 * turn, :].argmax()
    pins = jax.lax.fori_loop(
        0, 8, lambda i, p: _direction_pin(bs, turn, king_point, i, p), pins
    )
    return pins


# 特定の方向の動きだけを除いたactionを生成する
def _eliminate_direction(actions: jnp.ndarray, direction) -> jnp.ndarray:
    actions = actions.reshape(34, 81)
    # 2方向と成・不成の4方向のフラグを折る
    dir1, dir2 = 0, 0
    dir1, dir2 = jax.lax.switch(
        direction - 1,
        [
            lambda: (0, 5),  # direction == 1, 縦
            lambda: (1, 7),  # direction == 2, 右下がり
            lambda: (2, 6),  # direction == 3, 右上り
            lambda: (3, 4),  # direction == 4, 横
        ],
    )
    pro_dir1 = dir1 + 8
    pro_dir2 = dir2 + 8
    actions = actions.at[dir1].set(0)
    actions = actions.at[dir2].set(0)
    actions = actions.at[pro_dir1].set(0)
    actions = actions.at[pro_dir2].set(0)
    return actions.flatten()


# 利きの判定
# 玉の位置を透過する（玉をいないものとして扱う）ことで香車や角などの利きを玉の奥まで通す
def _kingless_effected_positions(
    bs: jnp.ndarray, king_point, turn
) -> jnp.ndarray:
    bs = bs.at[king_point].set(0)
    ix = jnp.arange(81)
    owners = jax.vmap(_owner)(bs)
    effects = jax.vmap(partial(_piece_moves, bs=bs))(piece=bs, point=ix)
    mask = jnp.tile(owners == turn, reps=(81, 1)).transpose()
    effects = jnp.where(mask, effects, 0)
    all_effect = effects.sum(axis=0)
    return all_effect


# 玉が移動する手に合法なものがあるかを調べる
def _king_escape(state: ShogiState):
    king_point = state.board[8 + 14 * state.turn, :].argmax()
    bs = _board_status(state)
    effects = _kingless_effected_positions(
        bs, king_point, _another_color(state)
    )
    king_moves = POINT_MOVES[king_point][8]
    owners = jax.vmap(_owner)(bs)
    ok = ((king_moves == 1) & (owners != state.turn) & (effects == 0)).any(0)
    return ok


# point同士の間の位置にフラグを立てる
def _between(point1: int, point2: int) -> jnp.ndarray:
    direction = _point_to_direction(point1, point2, False, 0)
    bet = jax.lax.cond(
        direction == -1,
        lambda: jnp.zeros(81, dtype=jnp.int32),
        lambda: _change_between(
            point1, point2, _direction_to_dif(direction, 0)
        ),
    )
    bet = bet.at[point2].set(0)
    return bet


# pinされている駒の非合法手を弾いてlegal_actionを返す
def _eliminate_pin_actions(
    bs: jnp.ndarray, pins: jnp.ndarray, actions: jnp.ndarray
):
    actions = jax.lax.fori_loop(
        0,
        81,
        lambda i, a: jax.lax.cond(
            pins[i] != 0,
            lambda: _filter_action(
                _eliminate_direction(_create_piece_actions(bs[i], i), pins[i]),
                a,
            ),
            lambda: a,
        ),
        actions,
    )
    return actions


# 玉が逃げる以外の手に王手回避の手があるかをチェック
# 存在しない場合True
# 両王手は考えない(事前にはじく)
def _is_avoid_check(
    cn,
    cnp,
    cfp,
    king_point,
    legal_actions: jnp.ndarray,
):
    is_close_check = cn == 1  # 密接の王手 (or 開き王手）
    # 玉が逃げる手以外の合法手は王手をかけた駒がある座標への移動のみ
    point = jax.lax.cond(
        is_close_check, lambda: cnp.argmax(), lambda: cfp.argmax()
    )
    # pointとking_pointの間。ここに駒を打ったり移動させたりする手は合法
    points = jax.lax.cond(
        is_close_check, lambda: cnp, lambda: _between(king_point, point)
    )

    actions = legal_actions.reshape(34, 81)
    ix = jnp.arange(81)
    mask = jnp.tile((points == 0) & (point != ix), reps=(34, 1))
    actions = jnp.where(mask, 0, actions)
    return (actions == 0).all()


# 詰み判定関数
# 王手がかかっていないならFalse
def _is_mate(state: ShogiState) -> bool:
    cn, cnp, cf, cfp = _is_check(state)
    # 王手がかかっていないならFalse
    return jax.lax.cond(
        cn + cf == 0,
        lambda: FALSE,
        lambda: _is_mate_noncheck(cn, cnp, cf, cfp, state),
    )


# 王手の有無にかかわらず詰みを判定する
def _is_mate_noncheck(
    cn: int, cnp: jnp.ndarray, cf: int, cfp: jnp.ndarray, state: ShogiState
):
    legal_actions = _legal_actions(state)
    bs = _board_status(state)
    king_point = state.board[8 + 14 * state.turn, :].argmax()
    # 玉が逃げる手以外の合法手
    legal_actions = _filter_move_actions(
        8 + 14 * state.turn, king_point, legal_actions
    )
    # ピンされている駒の非合法な動きをのぞく
    legal_actions = _eliminate_pin_actions(bs, _pin(state), legal_actions)
    return jax.lax.cond(
        _king_escape(state),
        # 玉が逃げる手が合法なら詰んでない
        lambda: FALSE,
        # 両王手がかかっている場合はTrue, そうでなければis_avoid_check参照
        lambda: (cn + cf >= 2)
        | _is_avoid_check(cn, cnp, cfp, king_point, legal_actions),
    )
