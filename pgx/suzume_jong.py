import jax
import jax.lax as lax
import jax.numpy as jnp
from flax import struct

NUM_TILES = 44
NUM_TILE_TYPES = 11
N_PLAYER = 3
MAX_RIVER_LENGTH = 10
WIN_CACHE = jnp.int8(
    [
        [3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
        [3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0],
        [0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0],
        [0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0],
        [0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0],
        [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0],
        [0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0],
        [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0],
        [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3],
        [3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0],
        [0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0],
        [0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0],
        [0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0],
        [0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0],
        [0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0],
        [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3],
        [3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0],
        [0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0],
        [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0],
        [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0],
        [0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0],
        [0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0],
        [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3],
        [3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0],
        [0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0],
        [0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0],
        [0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0],
        [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3],
        [3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0],
        [0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0],
        [0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0],
        [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0],
        [0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0],
        [0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0],
        [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3],
        [3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0],
        [0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0],
        [0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0],
        [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0],
        [0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0],
        [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3],
        [3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],
        [0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0],
        [0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0],
        [0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0],
        [0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],
        [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3],
        [3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0],
        [0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0],
        [0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0],
        [0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0],
        [0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0],
        [0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0],
        [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0],
        [0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0],
        [0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0],
        [0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0],
        [0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0],
        [0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0],
        [0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0],
        [0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],
        [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
        [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3],
        [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3],
        [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3],
        [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3],
        [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3],
        [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3],
        [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3],
        [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],
        [4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [3, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [3, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
        [3, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
        [3, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0],
        [1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 3, 0, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 3, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0],
        [0, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0],
        [1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 4, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 3, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 3, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 3, 0, 0, 1, 1, 1, 0, 0, 0],
        [0, 0, 3, 0, 0, 0, 1, 1, 1, 0, 0],
        [1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 3, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 3, 0, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 3, 0, 0, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 4, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 0, 3, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0, 3, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 3, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 4, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 4, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 3, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0],
        [0, 1, 1, 1, 0, 0, 3, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 3, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 3, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 4, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 4, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 4, 1, 1, 0, 0],
        [1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 0],
        [0, 1, 1, 1, 0, 0, 0, 3, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 3, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 3, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 4, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 4, 1, 0, 0],
        [1, 1, 1, 0, 0, 0, 0, 0, 3, 0, 0],
        [0, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 3, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 3, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 3, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 4, 0, 0],
        [1, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0],
        [0, 1, 1, 1, 0, 0, 0, 0, 0, 3, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 0, 3, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 3, 0],
        [0, 0, 0, 0, 1, 1, 1, 0, 0, 3, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 0],
        [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3],
        [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 3],
        [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 3],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 3],
        [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 3],
        [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 3],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3],
        [4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 3, 0, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 0, 0, 3, 0, 0],
        [1, 1, 1, 0, 0, 0, 0, 0, 0, 3, 0],
        [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3],
        [3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0, 3, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0, 0, 3, 0, 0, 0, 0],
        [0, 1, 1, 1, 0, 0, 0, 3, 0, 0, 0],
        [0, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0],
        [0, 1, 1, 1, 0, 0, 0, 0, 0, 3, 0],
        [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 3],
        [3, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 4, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 4, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 3, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 3, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 3, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 3, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 0, 3, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 3],
        [3, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 3, 0, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 3, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 4, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 3, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 3, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 3, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 3],
        [3, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 3, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 3, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 3, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 4, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 4, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 3, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 0, 0, 3, 0],
        [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 3],
        [3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
        [0, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0],
        [0, 0, 3, 0, 0, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 3, 0, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 3, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 4, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 4, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 4, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 3, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 3],
        [3, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 3, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 3, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 3, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 3, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 4, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 4, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 4, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 3],
        [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
        [1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0],
        [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
        [1, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
        [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0],
        [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
        [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0],
        [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0],
    ]
)


@struct.dataclass
class State:
    curr_player: jnp.ndarray = jnp.int8(0)
    legal_action_mask: jnp.ndarray = jnp.zeros(9, jnp.bool_)
    terminated: jnp.ndarray = jnp.bool_(False)
    turn: jnp.ndarray = jnp.int8(0)  # 0 = dealer
    rivers: jnp.ndarray = -jnp.ones(
        (N_PLAYER, MAX_RIVER_LENGTH), dtype=jnp.int8
    )  # type type (0~10) is set
    last_discard: jnp.ndarray = jnp.int8(-1)  # type type (0~10) is set
    hands: jnp.ndarray = jnp.zeros(
        (N_PLAYER, NUM_TILE_TYPES), dtype=jnp.int8
    )  # type type (0~10) is set
    walls: jnp.ndarray = jnp.zeros(
        NUM_TILES, dtype=jnp.int8
    )  # tile id (0~43) is set
    draw_ix: jnp.ndarray = jnp.int8(N_PLAYER * 5)
    shuffled_players: jnp.ndarray = jnp.zeros(N_PLAYER)  # 0: dealer, ...
    dora: jnp.ndarray = jnp.int8(0)  # type type (0~10) is set


# TODO: avoid Tenhou
@jax.jit
def init(rng: jax.random.KeyArray):
    # shuffle players and walls
    key1, key2 = jax.random.split(rng)
    shuffled_players = jnp.arange(N_PLAYER)
    shuffled_players = jax.random.shuffle(key1, shuffled_players)
    walls = jnp.arange(NUM_TILES, dtype=jnp.int8)
    walls = jax.random.shuffle(key2, walls)
    curr_player = shuffled_players[0]  # dealer
    dora = walls[-1] // 4
    # set hands (hands[0] = dealer's hand)
    hands = jnp.zeros((N_PLAYER, NUM_TILE_TYPES), dtype=jnp.int8)
    hands = lax.fori_loop(
        0, N_PLAYER * 5, lambda i, x: x.at[i // 5, walls[i] // 4].add(1), hands
    )
    # first draw
    draw_ix = jnp.int8(N_PLAYER * 5)
    hands = hands.at[0, walls[draw_ix] // 4].add(1)
    draw_ix += 1
    legal_action_mask = hands[0] > 0
    state = State(
        curr_player=curr_player,
        legal_action_mask=legal_action_mask,
        hands=hands,
        walls=walls,
        draw_ix=draw_ix,
        shuffled_players=shuffled_players,
        dora=dora,
    )  # type: ignore
    return curr_player, state


def _is_completed(hand: jnp.ndarray):
    x = jnp.abs(hand - WIN_CACHE).sum(axis=-1).min()
    return x == 0


def _check_ron(state: State) -> jnp.ndarray:
    win_players = jnp.zeros(N_PLAYER, dtype=jnp.bool_)
    if state.last_discard >= 0:
        for i in range(N_PLAYER):
            if state.turn == i:
                continue
            else:
                hand = state.hands[i]
                hand[state.last_discard] += 1
                if _is_completed(hand):
                    win_players[i] = True
    return win_players


def step(state: State, action: jnp.ndarray):
    # TODO: check tsumo
    # win_players = _check_ron(state)
    # if jnp.any(win_players):
    #     rewards = jnp.zeros(N_PLAYER, dtype=jnp.int8)
    #     rewards += win_players.astype(jnp.int8)
    # else:
    #     win_players

    # discard tile
    hands = state.hands.at[state.turn % N_PLAYER, action].add(-1)
    rivers = state.rivers.at[
        state.turn % N_PLAYER, state.turn // N_PLAYER
    ].set(action)
    last_discard = action
    # TODO: check ron

    # draw tile
    terminated = jnp.bool_(NUM_TILES - 1 <= state.draw_ix)
    if terminated:
        curr_player = jnp.int8(-1)
        legal_action_mask = jnp.zeros_like(state.legal_action_mask)
        state = state.replace(
            hands=hands,
            rivers=rivers,
            last_discard=last_discard,
            curr_player=curr_player,
            terminated=terminated,
            legal_action_mask=legal_action_mask,
        )
        r = jnp.zeros(3, dtype=jnp.float16)  # TODO: fix me
        return curr_player, state, r
    turn = state.turn + 1
    curr_player = state.shuffled_players[turn % N_PLAYER]
    hands = hands.at[turn % N_PLAYER, state.walls[state.draw_ix] // 4].add(1)
    draw_ix = state.draw_ix + 1
    legal_action_mask = hands[turn % N_PLAYER] > 0

    state = state.replace(turn=turn)
    state = state.replace(curr_player=curr_player)
    state = state.replace(hands=hands)
    state = state.replace(rivers=rivers)
    state = state.replace(last_discard=last_discard)
    state = state.replace(draw_ix=draw_ix)
    state = state.replace(legal_action_mask=legal_action_mask)
    state = state.replace(terminated=terminated)
    r = jnp.zeros(3, dtype=jnp.float16)  # TODO: fix me
    return curr_player, state, r


def _tile_type_to_str(tile_type) -> str:
    if tile_type < 9:
        s = str(tile_type + 1)
    elif tile_type == 9:
        s = "g"
    elif tile_type == 10:
        s = "r"
    return s


def _hand_to_str(hand: jnp.ndarray) -> str:
    s = ""
    for i in range(NUM_TILE_TYPES):
        for j in range(hand[i]):
            s += _tile_type_to_str(i)
    return s.ljust(6)


def _river_to_str(river: jnp.ndarray) -> str:
    s = ""
    for i in range(MAX_RIVER_LENGTH):
        tile_type = river[i]
        s += _tile_type_to_str(tile_type) if tile_type >= 0 else "x"
    return s


def _to_str(state: State):
    s = f"{'[terminated]' if state. terminated else ''} dora: {_tile_type_to_str(state.dora)}\n"
    for i in range(N_PLAYER):
        s += f"{'*' if not state.terminated and state.turn % N_PLAYER == i else ' '}[{state.shuffled_players[i]}] "
        s += f"{_hand_to_str(state.hands[i])}, "
        s += f"{_river_to_str(state.rivers[i])}\n"
    return s


def _is_valid(state: State) -> bool:
    if state.dora < 0 or 10 < state.dora:
        return False
    if 10 < state.last_discard:
        return False
    if state.last_discard < 0 and state.rivers[0, 0] >= 0:
        return False
    if jnp.any(state.hands < 0):
        return False
    counts = state.hands.sum(axis=0)
    for i in range(N_PLAYER):
        for j in range(MAX_RIVER_LENGTH):
            if state.rivers[i, j] >= 0:
                counts = counts.at[state.rivers[i, j]].add(1)
    if jnp.any(counts > 4):
        return False
    for i in range(NUM_TILE_TYPES):
        if state.legal_action_mask[i] and state.hands[state.turn, i] <= 0:
            return False
        if not state.legal_action_mask[i] and state.hands[state.turn, i] > 0:
            return False

    return True
