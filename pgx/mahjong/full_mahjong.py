from __future__ import annotations

from dataclasses import dataclass

import jax
import jax.numpy as jnp
from jax import jit, tree_util


class Tile:
    @staticmethod
    def to_str(tile: int) -> str:
        suit, num = tile // 9, tile % 9 + 1
        return str(num) + ["m", "p", "s", "z"][suit]


class Action:
    # 手出し: 0~33
    TSUMOGIRI = 34
    RIICHI = 35
    TSUMO = 36

    RON = 37
    PON = 38
    CHI_R = 39  # 45[6]
    CHI_M = 40  # 4[5]6
    CHI_L = 41  # [4]56
    PASS = 42

    NONE = 43


@dataclass
class Deck:
    idx: int
    arr: jnp.ndarray

    @jit
    def is_empty(self) -> bool:
        return self.size() == 0

    @jit
    def size(self) -> int:
        return 122 - self.idx

    def _tree_flatten(self):
        children = (self.idx, self.arr)
        aux_data = {}
        return (children, aux_data)

    @staticmethod
    @jit
    def init(key: jnp.ndarray) -> Deck:
        arr = jax.random.permutation(key, jnp.arange(136) // 4)
        return Deck(0, arr)

    @staticmethod
    @jit
    def draw(deck: Deck) -> tuple[Deck, int]:
        # assert not deck.is_empty()
        tile = deck.arr[deck.idx]
        deck.idx += 1
        return deck, tile

    @classmethod
    def _tree_unflatten(cls, aux_data, children):
        return cls(*children, **aux_data)


tree_util.register_pytree_node(Deck, Deck._tree_flatten, Deck._tree_unflatten)


class Hand:
    # fmt: off
    CACHE_SUITED = jnp.array(
        [1385955477, 2569143448, 0, 0, 3686684160, 2569143708, 5413232, 1385976476, 2569142272, 2569143448, 9961984, 0, 301312, 39200, 2569143440, 2569143448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14326640, 1385976476, 3686719232, 2569182652, 2574425584, 3686684316, 2579103744, 2569143512, 1385976464, 0, 301312, 39200, 2569143440, 421659800, 0, 1386011580, 2569143696, 2569143448, 5413120, 1385976476, 0, 0, 3686662144, 2569143708, 5413232, 1385976476, 3686684160, 421660060, 5413232, 303846044, 0, 0, 0, 0, 301312, 39200, 2569143440, 2569143448, 2569142272, 2569143448, 9961984, 0, 301312, 39200, 2569143440, 421659800, 0, 4, 39200, 0, 2569143296, 2569143448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2569143440, 2569143448, 9961984, 0, 0, 0, 262144, 39200, 2569143440, 421659800, 0, 0, 0, 0, 0, 2569143448, 9961984, 0, 301312, 39200, 421659792, 287442072, 2569142272, 421659800, 9961984, 0, 301312, 6432, 287442064, 16909336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1386011580, 2569182640, 2569143448, 2574425344, 3686684316, 0, 0, 3686662144, 2569143708, 5413232, 1385976476, 3686684160, 421660060, 5413232, 303846044, 0, 0, 2583338992, 3686684316, 3686719232, 2569182652, 2574425584, 1539200668, 2579365888, 2569182712, 3686684304, 421659800, 301312, 39200, 421659792, 287442072, 0, 3686719420, 2579105680, 421659800, 5675264, 1386011580, 421659792, 287442072, 3686662144, 421660060, 14326640, 303846044, 1539235584, 287448508, 292691440, 18224668, 0, 0, 0, 0, 2569444608, 2569182648, 2569143440, 421659800, 2574385152, 3686684316, 9961984, 0, 301312, 39200, 421659792, 287442072, 0, 2569143708, 5413232, 1385976476, 3686684160, 421660060, 5413232, 303846044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2569143440, 421659800, 9961984, 0, 0, 0, 262144, 39200, 421659792, 287442072, 0, 0, 0, 0, 0, 421659800, 9961984, 0, 301312, 6432, 287442064, 16909336, 421658624, 287442072, 1573376, 0, 268544, 4384, 16909328, 16, 0, 0, 0, 0, 0, 0, 0, 0, 3686662144, 2569182652, 2574425584, 1539200668, 3686684160, 421660060, 5413232, 303846044, 0, 2569143512, 1385976464, 0, 301312, 39200, 421659792, 287442072, 2569142272, 421659800, 9961984, 0, 301312, 6432, 287442064, 16909336, 0, 0, 2569143696, 421659800, 5413120, 1385976476, 0, 0, 3686662144, 421660060, 5413232, 303846044, 1539200512, 287442332, 5380464, 1315356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3686719232, 421699004, 426941936, 322852508, 2579103744, 421659864, 1385976464, 0, 301312, 6432, 287442064, 16909336, 0, 1386011580, 421660048, 287442072, 5413120, 303846044, 0, 0, 1539178496, 287442332, 5380464, 1315356, 322852352, 16909596, 1184112, 20, 0, 0, 14326640, 303846044, 1539235584, 287448508, 292691440, 18224668, 431620096, 287442136, 303846032, 0, 268544, 4384, 16909328, 16, 0, 303848380, 287442320, 16909336, 5380352, 1315356, 0, 0, 322830336, 16909596, 1184112, 20, 18224640, 276, 272]
        , dtype=jnp.uint32,
    )
    # fmt: on
    CACHE_HONOR = jnp.array([1, 0, 1, 1, 0])

    @staticmethod
    @jit
    def cache_suited(code: int) -> int:
        return (Hand.CACHE_SUITED[code >> 5] >> (code & 0b11111)) & 1

    @staticmethod
    @jit
    def can_ron(hand: jnp.ndarray, tile: int) -> bool:
        # assert jnp.sum(hand) % 3 == 1
        # assert hand[tile] < 4
        return Hand.can_tsumo(Hand.add(hand, tile))

    @staticmethod
    @jit
    def can_riichi(hand: jnp.ndarray) -> bool:
        # assert: hand is menzen
        return jax.lax.fori_loop(
            0,
            34,
            lambda i, sum: jax.lax.cond(
                hand[i] == 0,
                lambda: sum,
                lambda: sum | Hand.is_tenpai(Hand.sub(hand, i)),
            ),
            False,
        )

    @staticmethod
    @jit
    def is_tenpai(hand: jnp.ndarray) -> bool:
        # assert jnp.sum(hand) % 3 == 1
        return jax.lax.fori_loop(
            0,
            34,
            lambda tile, sum: jax.lax.cond(
                hand[tile] == 4,
                lambda: False,
                lambda: sum | Hand.can_ron(hand, tile),
            ),
            False,
        )

    @staticmethod
    @jit
    def can_tsumo(hand: jnp.ndarray) -> bool:
        # assert jnp.sum(hand) % 3 == 2
        heads = 0
        valid = True

        for i in range(3):
            heads, valid, code, size = jax.lax.fori_loop(
                0,
                9,
                lambda j, tpl: jax.lax.cond(
                    hand[9 * i + j] == 0,
                    lambda: (
                        tpl[0] + (tpl[3] % 3 == 2),
                        tpl[1] & (Hand.cache_suited(tpl[2]) != 0),
                        0,
                        0,
                    ),
                    lambda: (
                        tpl[0],
                        tpl[1],
                        ((tpl[2] << 1) + 1)
                        << (hand[9 * i + j].astype(int) - 1),
                        tpl[3] + hand[9 * i + j].astype(int),
                    ),
                ),
                (heads, valid, 0, 0),
            )

            heads += size % 3 == 2
            valid &= Hand.cache_suited(code) != 0

        heads, valid = jax.lax.fori_loop(
            27,
            34,
            lambda i, tpl: (
                tpl[0] + (hand[i] % 3 == 2),
                tpl[1] & (Hand.CACHE_HONOR[hand[i]] != 0),
            ),
            (heads, valid),
        )

        return valid & (heads == 1)

    @staticmethod
    @jit
    def can_pon(hand: jnp.ndarray, tile: int) -> bool:
        return hand[tile] >= 2

    @staticmethod
    @jit
    def can_chi(hand: jnp.ndarray, tile: int, action: int) -> bool:
        # assert jnp.sum(hand) % 3 == 1
        # assert action is Action.CHI_R, CHI_M or CHI_L
        return jax.lax.switch(
            action - Action.CHI_R,
            [
                lambda: (
                    (tile < 27)
                    & (tile % 9 > 1)
                    & (hand[tile - 2] > 0)
                    & (hand[tile - 1] > 0)
                ),
                lambda: (
                    (tile < 27)
                    & (tile % 9 > 0)
                    & (tile % 9 < 8)
                    & (hand[tile - 1] > 0)
                    & (hand[tile + 1] > 0)
                ),
                lambda: (
                    (tile < 27)
                    & (tile % 9 < 7)
                    & (hand[tile + 1] > 0)
                    & (hand[tile + 2] > 0)
                ),
            ],
        )

    @staticmethod
    @jit
    def add(hand: jnp.ndarray, tile: int, x: int = 1) -> jnp.ndarray:
        # assert 0 <= hand[tile] + x <= 4
        return hand.at[tile].set(hand[tile] + x)

    @staticmethod
    @jit
    def sub(hand: jnp.ndarray, tile: int, x: int = 1) -> jnp.ndarray:
        # assert 0 <= hand[tile] - x <= 4
        return Hand.add(hand, tile, -x)

    @staticmethod
    @jit
    def pon(hand: jnp.ndarray, tile: int) -> jnp.ndarray:
        # assert Hand.can_pon(hand, tile)
        return Hand.sub(hand, tile, 2)

    @staticmethod
    @jit
    def chi(hand: jnp.ndarray, tile: int, action: int) -> jnp.ndarray:
        # assert Hand.can_chi(hand, tile, action)
        # assert action is Action.CHI_R, CHI_M or CHI_L
        return jax.lax.switch(
            action - Action.CHI_R,
            [
                lambda: Hand.sub(Hand.sub(hand, tile - 2), tile - 1),
                lambda: Hand.sub(Hand.sub(hand, tile - 1), tile + 1),
                lambda: Hand.sub(Hand.sub(hand, tile + 1), tile + 2),
            ],
        )

    @staticmethod
    def to_str(hand: jnp.ndarray) -> str:
        s = ""
        for i in range(4):
            t = ""
            for j in range(9 if i < 3 else 7):
                t += str(j + 1) * hand[9 * i + j]
            if t:
                t += ["m", "p", "s", "z"][i]
            s += t
        return s

    @staticmethod
    def from_str(s: str) -> jnp.ndarray:
        base = 0
        hand = jnp.zeros(34, dtype=jnp.uint8)
        for c in reversed(s):
            if c == "m":
                base = 0
            elif c == "p":
                base = 9
            elif c == "s":
                base = 18
            elif c == "z":
                base = 27
            else:
                hand = Hand.add(hand, ord(c) - ord("1") + base)
        return hand


@dataclass
class Observation:
    hand: jnp.ndarray
    target: int
    last_draw: int


class Meld:
    @staticmethod
    @jit
    def init(action: int, target: int, src: int) -> int:
        return (src << 12) | (target << 6) | action

    @staticmethod
    def to_str(meld: int) -> str:
        action = Meld.action(meld)
        target = Meld.target(meld)
        suit, num = target // 9, target % 9 + 1
        if action == Action.PON:
            return "{}{}{}{}".format(num, num, num, ["m", "p", "s", "z"][suit])
        if action == Action.CHI_R:
            return "{}{}{}{}".format(
                num - 2, num - 1, num, ["m", "p", "s", "z"][suit]
            )
        if action == Action.CHI_M:
            return "{}{}{}{}".format(
                num - 1, num, num + 1, ["m", "p", "s", "z"][suit]
            )
        if action == Action.CHI_L:
            return "{}{}{}{}".format(
                num, num + 1, num + 2, ["m", "p", "s", "z"][suit]
            )
        return ""

    @staticmethod
    @jit
    def target(meld: int) -> int:
        return (meld >> 6) & 0b111111

    @staticmethod
    @jit
    def action(meld: int) -> int:
        return meld & 0b111111


class Yaku:
    # fmt: off
    CACHE_SUITED = jnp.array(
        [0, 1, 2084, 2048, 20, 16, 16, 2100, 6180, 2050, 17, 4097, 27277316, 20, 33, 6213, 18, 2084, 2085, 19, 10276, 20, 2148, 2212, 34852, 2340, 2064, 6144, 2343, 65011745, 2080, 52, 84, 16, 148, 32788, 276, 4181, 53, 8342, 4112, 86, 16663, 151, 48, 14352, 48, 8208, 80, 109068304, 80, 16400, 2080, 144, 144, 48, 80, 144, 124780564, 14356, 6229, 2100, 2101, 2164, 2066, 17, 2228, 2067, 34868, 2068, 2356, 2359, 4113, 6147, 2082, 10242, 49, 10390, 2114, 8209, 2083, 2134, 81, 4210705, 18711, 2085, 145, 2199, 192938033, 18, 4129, 12289, 195049508, 52, 4161, 19, 53, 8388641, 6244, 6245, 6308, 38948, 6436, 6439, 8225, 222312516, 84, 228603973, 97, 85, 86, 16417, 237008901, 243286037, 161, 32801, 2085, 249575556, 289, 148, 253802500, 32788, 264255748, 4115, 50, 4116, 276, 8210, 149, 276838534, 82, 16402, 150, 151, 146, 6213, 51, 6214, 22597, 52, 6341, 53, 6469, 71749, 6725, 6728, 308283458, 2149, 34852, 2340, 2213, 2341, 67621, 8212, 83, 16403, 2597, 2343, 147, 10404, 84, 339738705, 43044, 85, 10532, 86, 10406, 10535, 2150, 16405, 148, 32788, 34916, 2404, 276, 67684, 149, 2660, 2407, 150, 34980, 151, 2468, 67748, 2724, 390203556, 18727, 3236, 35108, 398459025, 100388, 35364, 404752676, 2215, 67876, 2852, 133412, 3364, 264484, 2471, 6160, 35111, 100391, 35368, 2096, 2343, 2344, 10256, 67879, 2855, 2128, 18448, 3367, 264487, 2192, 453013537, 1048628, 1048629, 6176, 10500096, 463470689, 116, 6208, 469762209, 180, 2080, 476086305, 478154817, 32820, 482345249, 308, 311, 10272, 1048660, 1048662, 212, 2144, 32852, 340, 18464, 65620, 596, 2208, 34848, 1048724, 32916, 2336, 404, 65684, 660, 526516372, 16663, 1172, 33044, 98324, 33300, 48, 542114068, 1048727, 65812, 788, 131348, 1300, 262420, 97, 161, 80, 16400, 289, 568356885, 144, 53, 12438, 4181, 4182, 20565, 4309, 4437, 69717, 4693, 4696, 20759, 4247, 595591250, 117, 181, 309, 65589, 565, 146, 118, 16695, 183, 33336, 312, 24726, 622911510, 86, 24855, 8342, 8343, 41110, 8598, 8854, 139414, 9366, 9369, 645922963, 214, 342, 598, 131158, 1110, 16727, 215, 33368, 344, 66649, 601, 12304, 16791, 49431, 4176, 20496, 681689111, 151, 4240, 49688, 16663, 48, 16664, 82199, 17175, 17687, 278807, 704643348, 407, 663, 1175, 262295, 33432, 408, 66713, 665, 0, 0, 0, 0, 112, 0, 0, 16432, 0, 0, 176, 32816, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24592, 0, 0, 8336, 0, 0, 80, 0, 0, 0, 0, 0, 0, 16464, 0, 0, 0, 208, 0, 0, 32848, 0, 0, 336, 65616, 0, 0, 592, 0, 0, 0, 16528, 49168, 0, 0, 16656, 0, 0, 144, 0, 0, 0, 0, 0, 0, 32912, 0, 0, 0, 400, 0, 0, 65680, 0, 0, 656, 131216, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6163, 2098, 6164, 0, 10258, 49, 0, 2130, 18450, 0, 0, 2194, 0, 2099, 0, 81, 14696465, 0, 2101, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10260, 2131, 18451, 0, 0, 2195, 0, 2132, 0, 0, 2133, 0, 2134, 0, 0, 0, 18453, 2196, 34836, 0, 0, 2324, 0, 2197, 0, 0, 2198, 0, 2199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12305, 6179, 2082, 4177, 16797713, 0, 6181, 4241, 0, 10274, 25165873, 6211, 22531, 2146, 0, 6275, 18466, 6212, 0, 2210, 31492130, 0, 6214, 2338, 0, 0, 2083, 10306, 26626, 113, 0, 10370, 35668017, 0, 37750850, 177, 32817, 0, 0, 305, 0, 18498, 0, 0, 0, 2242, 0, 0, 34882, 0, 0, 2370, 67650, 0, 0, 2626, 0, 0, 0, 0, 41967633, 2147, 10277, 8337, 18467, 0, 81, 2211, 34851, 0, 0, 2339, 0, 46153809, 0, 0, 2149, 209, 2150, 0, 32849, 0, 0, 337, 65617, 0, 0, 593, 0, 0, 18469, 48251025, 50380817, 0, 0, 52445457, 0, 2213, 145, 0, 2214, 0, 2215, 0, 0, 32913, 34854, 2341, 67621, 401, 0, 2597, 65681, 2342, 0, 657, 58851473, 0, 2344, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12321, 0, 82, 16402, 4193, 0, 146, 20513, 0, 0, 4257, 36897, 0, 0, 4385, 0, 0, 0, 12353, 60846081, 0, 53, 12417, 0, 0, 4161, 0, 0, 0, 0, 0, 0, 20545, 0, 0, 0, 4289, 0, 0, 36929, 0, 0, 4417, 69697, 0, 0, 4673, 0, 0, 0, 0, 16403, 0, 0, 147, 0, 67108961, 0, 0, 85, 0, 86, 0, 0, 0, 16405, 71303329, 73433121, 0, 0, 75497761, 0, 149, 0, 0, 150, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24609, 0, 0, 8353, 40993, 0, 0, 8481, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0, 32865, 0, 0, 353, 65633, 0, 0, 609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49185, 0, 0, 16673, 0, 0, 161, 0, 0, 0, 0, 0, 0, 32929, 0, 0, 0, 417, 0, 0, 65697, 0, 0, 673, 131233, 0, 0, 1185, 0, 0, 0, 33057, 98337, 0, 0, 33313, 0, 0, 289, 0, 0, 0, 0, 0, 0, 65825, 0, 0, 0, 801, 0, 0, 131361, 0, 0, 1313, 262433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12308, 4179, 20499, 114, 0, 4243, 16434, 4180, 0, 178, 77627442, 0, 4182, 306, 0, 0, 20501, 4244, 36884, 0, 0, 4372, 0, 4245, 0, 0, 4246, 0, 4247, 0, 0, 0, 0, 0, 24594, 0, 0, 8338, 52, 0, 79691858, 0, 0, 0, 0, 0, 0, 16466, 0, 0, 0, 210, 0, 0, 32850, 0, 0, 338, 65618, 0, 0, 594, 0, 0, 0, 16530, 49170, 0, 0, 16658, 0, 0, 146, 0, 0, 0, 0, 0, 0, 32914, 0, 0, 0, 402, 0, 0, 65682, 0, 0, 658, 131218, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 0, 0, 16435, 0, 0, 179, 32819, 0, 0, 307, 0, 116, 0, 0, 117, 0, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16437, 180, 32820, 0, 0, 308, 0, 181, 0, 0, 182, 0, 183, 0, 0, 0, 32822, 309, 65589, 0, 0, 565, 0, 310, 0, 0, 311, 0, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16467, 24597, 8340, 40980, 211, 0, 8468, 32851, 8341, 0, 339, 81854547, 0, 8343, 595, 0, 0, 84, 16531, 49171, 0, 0, 16659, 85, 0, 85983379, 0, 0, 0, 0, 0, 0, 32915, 0, 0, 0, 403, 0, 0, 65683, 0, 0, 659, 131219, 0, 0, 1171, 0, 0, 0, 0, 16469, 212, 16470, 0, 32852, 0, 0, 340, 65620, 0, 0, 596, 0, 213, 0, 0, 214, 0, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32854, 341, 65621, 0, 0, 597, 0, 342, 0, 0, 343, 0, 344, 0, 0, 0, 65623, 598, 131158, 0, 0, 1110, 0, 599, 0, 0, 600, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16533, 148, 0, 16534, 0, 16535, 0, 0, 32916, 49174, 16661, 81941, 404, 0, 16917, 65684, 16662, 0, 660, 88211604, 0, 16664, 1172, 0, 0, 149, 33044, 98324, 0, 0, 33300, 150, 0, 90177812, 0, 0, 0, 0, 0, 0, 65812, 0, 0, 0, 788, 0, 0, 131348, 0, 0, 1300, 262420, 0, 0, 0, 0, 0, 0, 0, 32918, 405, 32919, 0, 65685, 0, 0, 661, 131221, 0, 0, 1173, 0, 406, 0, 0, 407, 0, 408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65687, 662, 131222, 0, 0, 1174, 0, 663, 0, 0, 664, 0, 665, 0, 0, 0, 131224, 1175, 262295, 0, 0, 0, 0, 1176, 0, 0, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95420432, 0, 0, 6224, 22544, 0, 0, 6288, 0, 0, 2096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2160, 0, 0, 18480, 0, 0, 2224, 34864, 0, 0, 2352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26640, 0, 0, 10384, 0, 0, 2128, 0, 0, 0, 0, 0, 0, 18512, 0, 0, 0, 2256, 0, 0, 34896, 0, 0, 2384, 67664, 0, 0, 2640, 0, 0, 0, 18576, 51216, 0, 0, 18704, 0, 0, 2192, 0, 0, 0, 0, 0, 0, 34960, 0, 0, 0, 2448, 0, 0, 67728, 0, 0, 2704, 133264, 0, 0, 3216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96483360, 0, 0, 0, 6240, 0, 0, 22560, 0, 0, 6304, 38944, 0, 0, 6432, 0, 0, 0, 100677696, 102791168, 0, 0, 111163520, 0, 0, 6208, 0, 0, 0, 0, 0, 0, 22592, 0, 0, 0, 6336, 0, 0, 38976, 0, 0, 6464, 71744, 0, 0, 6720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2208, 34848, 0, 0, 2336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26656, 0, 0, 10400, 43040, 0, 0, 10528, 0, 0, 2144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2272, 0, 0, 34912, 0, 0, 2400, 67680, 0, 0, 2656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51232, 0, 0, 18720, 0, 0, 2208, 0, 0, 0, 0, 0, 0, 34976, 0, 0, 0, 2464, 0, 0, 67744, 0, 0, 2720, 133280, 0, 0, 3232, 0, 0, 0, 35104, 100384, 0, 0, 35360, 0, 0, 2336, 0, 0, 0, 0, 0, 0, 67872, 0, 0, 0, 2848, 0, 0, 133408, 0, 0, 3360, 264480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1048624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 16432, 0, 0, 176, 32816, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1048656, 0, 0, 0, 0, 0, 0, 16464, 0, 0, 0, 208, 0, 0, 32848, 0, 0, 336, 65616, 0, 0, 592, 0, 0, 0, 16528, 49168, 0, 0, 16656, 0, 0, 1048720, 0, 0, 0, 0, 0, 0, 32912, 0, 0, 0, 400, 0, 0, 65680, 0, 0, 656, 131216, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115372048, 0, 0, 12432, 0, 0, 4176, 0, 0, 0, 0, 0, 0, 20560, 0, 0, 0, 4304, 0, 0, 36944, 0, 0, 4432, 69712, 0, 0, 4688, 0, 0, 0, 20624, 53264, 0, 0, 20752, 0, 0, 4240, 0, 0, 0, 0, 0, 0, 37008, 0, 0, 0, 4496, 0, 0, 69776, 0, 0, 4752, 135312, 0, 0, 5264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 32816, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 32880, 0, 0, 368, 65648, 0, 0, 624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49200, 0, 0, 16688, 0, 0, 176, 0, 0, 0, 0, 0, 0, 32944, 0, 0, 0, 432, 0, 0, 65712, 0, 0, 688, 131248, 0, 0, 1200, 0, 0, 0, 33072, 98352, 0, 0, 33328, 0, 0, 304, 0, 0, 0, 0, 0, 0, 65840, 0, 0, 0, 816, 0, 0, 131376, 0, 0, 1328, 262448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24720, 117497872, 0, 0, 24848, 0, 0, 8336, 0, 0, 0, 0, 0, 0, 41104, 0, 0, 0, 8592, 0, 0, 73872, 0, 0, 8848, 139408, 0, 0, 9360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 65616, 0, 0, 592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49232, 0, 0, 16720, 82000, 0, 0, 16976, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 464, 0, 0, 65744, 0, 0, 720, 131280, 0, 0, 1232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98384, 0, 0, 33360, 0, 0, 336, 0, 0, 0, 0, 0, 0, 65872, 0, 0, 0, 848, 0, 0, 131408, 0, 0, 1360, 262480, 0, 0, 0, 0, 0, 0, 66128, 196688, 0, 0, 66640, 0, 0, 592, 0, 0, 0, 0, 0, 0, 131664, 0, 0, 0, 1616, 0, 0, 262736, 0, 0, 0, 524880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49296, 0, 0, 0, 16784, 0, 0, 82064, 0, 0, 17040, 147600, 0, 0, 17552, 0, 0, 0, 49424, 119652368, 0, 0, 49680, 0, 0, 16656, 0, 0, 0, 0, 0, 0, 82192, 0, 0, 0, 17168, 0, 0, 147728, 0, 0, 17680, 278800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 131216, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98448, 0, 0, 33424, 163984, 0, 0, 33936, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 912, 0, 0, 131472, 0, 0, 1424, 262544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196752, 0, 0, 66704, 0, 0, 656, 0, 0, 0, 0, 0, 0, 131728, 0, 0, 0, 1680, 0, 0, 262800, 0, 0, 0, 524944, 0, 0, 0, 0, 0, 0, 132240, 393360, 0, 0, 0, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 263312, 0, 0, 0, 0, 0, 0, 525456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122683441, 6227, 22547, 2162, 0, 6291, 18482, 6228, 0, 2226, 125863986, 0, 6230, 2354, 0, 0, 22549, 6292, 38932, 0, 0, 6420, 0, 6293, 0, 0, 6294, 0, 6295, 0, 0, 0, 0, 0, 26642, 113, 0, 10386, 127942705, 0, 130025554, 177, 32817, 0, 0, 305, 0, 18514, 0, 0, 0, 2258, 0, 0, 34898, 0, 0, 2386, 67666, 0, 0, 2642, 0, 0, 0, 18578, 51218, 0, 0, 18706, 0, 0, 2194, 0, 0, 0, 0, 0, 0, 34962, 0, 0, 0, 2450, 0, 0, 67730, 0, 0, 2706, 133266, 0, 0, 3218, 0, 0, 0, 0, 0, 0, 0, 0, 18483, 0, 1048657, 2227, 34867, 0, 0, 2355, 0, 132137041, 0, 0, 2165, 209, 2166, 0, 32849, 0, 0, 337, 65617, 0, 0, 593, 0, 0, 18485, 138428561, 142655505, 0, 0, 146817297, 0, 2229, 1048721, 0, 2230, 0, 2231, 0, 0, 32913, 34870, 2357, 67637, 401, 0, 2613, 65681, 2358, 0, 657, 149029009, 0, 2360, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18515, 26645, 10388, 43028, 2259, 0, 10516, 34899, 10389, 0, 2387, 161548371, 0, 10391, 2643, 0, 0, 2132, 18579, 51219, 0, 0, 18707, 2133, 0, 169871507, 0, 0, 0, 0, 0, 0, 34963, 0, 0, 0, 2451, 0, 0, 67731, 0, 0, 2707, 133267, 0, 0, 3219, 0, 0, 0, 0, 18517, 2260, 18518, 0, 34900, 0, 0, 2388, 67668, 0, 0, 2644, 0, 2261, 0, 0, 2262, 0, 2263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34902, 2389, 67669, 0, 0, 2645, 0, 2390, 0, 0, 2391, 0, 2392, 0, 0, 0, 67671, 2646, 133206, 0, 0, 3158, 0, 2647, 0, 0, 2648, 0, 2649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18581, 2196, 0, 18582, 0, 18583, 0, 0, 34964, 51222, 18709, 83989, 2452, 0, 18965, 67732, 18710, 0, 2708, 176294036, 0, 18712, 3220, 0, 0, 2197, 35092, 100372, 0, 0, 35348, 2198, 0, 182454548, 0, 0, 0, 0, 0, 0, 67860, 0, 0, 0, 2836, 0, 0, 133396, 0, 0, 3348, 264468, 0, 0, 0, 0, 0, 0, 0, 34966, 2453, 34967, 0, 67733, 0, 0, 2709, 133269, 0, 0, 3221, 0, 2454, 0, 0, 2455, 0, 2456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67735, 2710, 133270, 0, 0, 3222, 0, 2711, 0, 0, 2712, 0, 2713, 0, 0, 0, 133272, 3223, 264343, 0, 0, 0, 0, 3224, 0, 0, 3225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184578065, 6243, 201340965, 12433, 22563, 2146, 4177, 6307, 38947, 0, 0, 6435, 0, 205541457, 0, 2210, 207652898, 4305, 6246, 2338, 36945, 0, 0, 4433, 69713, 0, 0, 4689, 0, 0, 22565, 209735825, 211865617, 0, 0, 213930257, 0, 6309, 4241, 0, 6310, 0, 6311, 0, 0, 37009, 38950, 6437, 71717, 4497, 0, 6693, 69777, 6438, 0, 4753, 216141969, 0, 6440, 5265, 0, 0, 0, 0, 0, 0, 0, 0, 26658, 220201073, 6211, 10402, 224438306, 0, 230701126, 10530, 0, 22595, 234883170, 245366961, 251691057, 6339, 0, 255852849, 38979, 268449925, 0, 6467, 270604355, 0, 278935687, 6723, 0, 0, 6212, 22659, 55299, 2274, 0, 22787, 283150434, 0, 287316099, 2402, 67682, 0, 0, 2658, 0, 39043, 0, 0, 0, 6531, 0, 0, 71811, 0, 0, 6787, 137347, 0, 0, 7299, 0, 0, 0, 0, 289458210, 6340, 22598, 18722, 38980, 0, 2210, 6468, 71748, 0, 0, 6724, 0, 293636258, 0, 0, 6342, 2466, 6343, 0, 67746, 0, 0, 2722, 133282, 0, 0, 3234, 0, 0, 38982, 297830690, 299993122, 0, 0, 302025250, 0, 6470, 2338, 0, 6471, 0, 6472, 0, 0, 67874, 71751, 6726, 137286, 2850, 0, 7238, 133410, 6727, 0, 3362, 304351522, 0, 6729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26690, 113, 2211, 34851, 10434, 0, 2339, 43074, 0, 0, 10562, 75842, 0, 0, 10818, 0, 0, 0, 26754, 306243586, 241, 2150, 26882, 32881, 0, 10370, 369, 65649, 0, 0, 625, 0, 43138, 0, 0, 0, 10626, 0, 0, 75906, 0, 0, 10882, 141442, 0, 0, 11394, 0, 0, 0, 0, 310427697, 0, 0, 312492337, 0, 314575042, 177, 0, 2214, 0, 2215, 0, 0, 32945, 34854, 316672322, 318834754, 433, 0, 327158338, 65713, 2342, 0, 689, 329384113, 0, 2344, 1201, 0, 0, 0, 33073, 98353, 0, 0, 33329, 0, 0, 305, 0, 0, 0, 0, 0, 0, 65841, 0, 0, 0, 817, 0, 0, 131377, 0, 0, 1329, 262449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51266, 0, 0, 18754, 84034, 0, 0, 19010, 0, 0, 2242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2498, 0, 0, 67778, 0, 0, 2754, 133314, 0, 0, 3266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100418, 0, 0, 35394, 0, 0, 2370, 0, 0, 0, 0, 0, 0, 67906, 0, 0, 0, 2882, 0, 0, 133442, 0, 0, 3394, 264514, 0, 0, 0, 0, 0, 0, 68162, 198722, 0, 0, 68674, 0, 0, 2626, 0, 0, 0, 0, 0, 0, 133698, 0, 0, 0, 3650, 0, 0, 264770, 0, 0, 0, 526914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26661, 333471889, 337698833, 2275, 0, 343957777, 34915, 10405, 8337, 2403, 348194915, 0, 10407, 2659, 0, 41105, 43046, 10533, 75813, 8593, 0, 10789, 73873, 10534, 0, 8849, 350363793, 0, 10536, 9361, 0, 0, 0, 0, 51235, 0, 0, 18723, 2149, 209, 352323747, 0, 0, 0, 0, 0, 0, 34979, 0, 337, 65617, 2467, 0, 593, 67747, 0, 0, 2723, 133283, 0, 0, 3235, 0, 0, 0, 35107, 100387, 0, 0, 35363, 0, 0, 2339, 0, 0, 0, 0, 0, 0, 67875, 0, 0, 0, 2851, 0, 0, 133411, 0, 0, 3363, 264483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360759377, 0, 0, 362824017, 367083601, 0, 0, 371212881, 0, 2277, 209, 0, 2278, 0, 2279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34918, 2405, 67685, 465, 0, 2661, 65745, 2406, 0, 721, 373424337, 0, 2408, 1233, 0, 0, 67687, 2662, 133222, 0, 0, 3174, 0, 2663, 0, 0, 2664, 0, 2665, 0, 0, 0, 0, 0, 98385, 0, 0, 33361, 0, 0, 337, 0, 0, 0, 0, 0, 0, 65873, 0, 0, 0, 849, 0, 0, 131409, 0, 0, 1361, 262481, 0, 0, 0, 0, 0, 0, 66129, 196689, 0, 0, 66641, 0, 0, 593, 0, 0, 0, 0, 0, 0, 131665, 0, 0, 0, 1617, 0, 0, 262737, 0, 0, 0, 524881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377536657, 51238, 18725, 84005, 381698449, 0, 18981, 383860881, 18726, 0, 385893009, 388120721, 0, 18728, 392184977, 0, 0, 2213, 394314001, 396476433, 0, 0, 400605713, 2214, 0, 402669841, 0, 0, 0, 0, 0, 0, 406929681, 0, 0, 0, 408961809, 0, 0, 411189521, 0, 0, 413156625, 415514897, 0, 0, 0, 0, 0, 0, 0, 34982, 2469, 34983, 0, 67749, 401, 0, 2725, 133285, 0, 0, 3237, 0, 2470, 0, 657, 417464465, 0, 2472, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67751, 2726, 133286, 0, 0, 3238, 0, 2727, 0, 0, 2728, 0, 2729, 0, 0, 0, 133288, 3239, 264359, 0, 0, 0, 0, 3240, 0, 0, 3241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98449, 35110, 2341, 33425, 421691537, 0, 35112, 33937, 0, 67877, 423625105, 35366, 165926, 2853, 0, 35878, 133413, 35367, 0, 3365, 425986341, 0, 35369, 0, 0, 0, 2342, 68133, 198693, 913, 0, 68645, 430047633, 0, 432015909, 1425, 262545, 0, 0, 0, 0, 133669, 0, 0, 0, 3621, 0, 0, 264741, 0, 0, 0, 526885, 0, 0, 0, 0, 0, 0, 0, 436404369, 2854, 67880, 66705, 133414, 0, 657, 3366, 264486, 0, 0, 0, 0, 438436497, 0, 0, 2856, 1681, 2857, 0, 262801, 0, 0, 0, 524945, 0, 0, 0, 0, 0, 133416, 444728465, 447086737, 0, 0, 0, 0, 3368, 1169, 0, 3369, 0, 0, 0, 0, 263313, 264489, 0, 526632, 0, 0, 0, 525457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 451936289, 0, 456130642, 12449, 45089, 0, 0, 12577, 0, 16466, 4193, 0, 0, 210, 0, 0, 32850, 0, 0, 338, 65618, 0, 0, 594, 0, 0, 0, 16530, 49170, 4321, 0, 16658, 36961, 0, 1048722, 4449, 69729, 0, 0, 4705, 0, 32914, 0, 0, 0, 402, 0, 0, 65682, 0, 0, 658, 131218, 0, 0, 1170, 0, 0, 0, 0, 53281, 0, 0, 20769, 0, 0, 4257, 0, 0, 0, 0, 0, 0, 37025, 0, 0, 0, 4513, 0, 0, 69793, 0, 0, 4769, 135329, 0, 0, 5281, 0, 0, 0, 37153, 102433, 0, 0, 37409, 0, 0, 4385, 0, 0, 0, 0, 0, 0, 69921, 0, 0, 0, 4897, 0, 0, 135457, 0, 0, 5409, 266529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461402177, 0, 0, 117, 12481, 118, 0, 45121, 0, 0, 12609, 77889, 0, 0, 12865, 0, 0, 16437, 467693697, 474017793, 0, 0, 480276737, 0, 181, 12417, 0, 182, 0, 183, 0, 0, 45185, 32822, 309, 65589, 12673, 0, 565, 77953, 310, 0, 12929, 484585601, 0, 312, 13441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4417, 69697, 0, 0, 4673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53313, 0, 0, 20801, 86081, 0, 0, 21057, 0, 0, 4289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4545, 0, 0, 69825, 0, 0, 4801, 135361, 0, 0, 5313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102465, 0, 0, 37441, 0, 0, 4417, 0, 0, 0, 0, 0, 0, 69953, 0, 0, 0, 4929, 0, 0, 135489, 0, 0, 5441, 266561, 0, 0, 0, 0, 0, 0, 70209, 200769, 0, 0, 70721, 0, 0, 4673, 0, 0, 0, 0, 0, 0, 135745, 0, 0, 0, 5697, 0, 0, 266817, 0, 0, 0, 528961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 489685089, 16531, 49171, 0, 0, 16659, 1048661, 0, 491782291, 0, 0, 0, 0, 0, 0, 32915, 0, 0, 0, 403, 0, 0, 65683, 0, 0, 659, 131219, 0, 0, 1171, 0, 0, 0, 0, 16469, 492830945, 16470, 0, 497057889, 0, 0, 499122529, 503382113, 0, 0, 505414241, 0, 213, 0, 0, 214, 0, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32854, 341, 65621, 0, 0, 597, 0, 342, 0, 0, 343, 0, 344, 0, 0, 0, 65623, 598, 131158, 0, 0, 1110, 0, 599, 0, 0, 600, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16533, 512753825, 0, 16534, 0, 16535, 0, 0, 513835169, 49174, 16661, 81941, 517996961, 0, 16917, 520159393, 16662, 0, 522191521, 524419233, 0, 16664, 528483489, 0, 0, 1048725, 530612513, 532774945, 0, 0, 534807073, 1048726, 0, 540016929, 0, 0, 0, 0, 0, 0, 543228193, 0, 0, 0, 545260321, 0, 0, 547488033, 0, 0, 549455137, 551813409, 0, 0, 0, 0, 0, 0, 0, 32918, 405, 32919, 0, 65685, 0, 0, 661, 131221, 0, 0, 1173, 0, 406, 0, 0, 407, 0, 408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65687, 662, 131222, 0, 0, 1174, 0, 663, 0, 0, 664, 0, 665, 0, 0, 0, 131224, 1175, 262295, 0, 0, 0, 0, 1176, 0, 0, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 553705505, 0, 0, 24865, 0, 0, 8353, 0, 0, 0, 0, 0, 0, 41121, 0, 0, 0, 8609, 0, 0, 73889, 0, 0, 8865, 139425, 0, 0, 9377, 0, 0, 0, 41249, 106529, 0, 0, 41505, 0, 0, 8481, 0, 0, 0, 0, 0, 0, 74017, 0, 0, 0, 8993, 0, 0, 139553, 0, 0, 9505, 270625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 353, 65633, 0, 0, 609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 481, 0, 0, 65761, 0, 0, 737, 131297, 0, 0, 1249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98401, 0, 0, 33377, 0, 0, 353, 0, 0, 0, 0, 0, 0, 65889, 0, 0, 0, 865, 0, 0, 131425, 0, 0, 1377, 262497, 0, 0, 0, 0, 0, 0, 66145, 196705, 0, 0, 66657, 0, 0, 609, 0, 0, 0, 0, 0, 0, 131681, 0, 0, 0, 1633, 0, 0, 262753, 0, 0, 0, 524897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49441, 555860001, 0, 0, 49697, 0, 0, 16673, 0, 0, 0, 0, 0, 0, 82209, 0, 0, 0, 17185, 0, 0, 147745, 0, 0, 17697, 278817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 673, 131233, 0, 0, 1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98465, 0, 0, 33441, 164001, 0, 0, 33953, 0, 0, 417, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 929, 0, 0, 131489, 0, 0, 1441, 262561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196769, 0, 0, 66721, 0, 0, 673, 0, 0, 0, 0, 0, 0, 131745, 0, 0, 0, 1697, 0, 0, 262817, 0, 0, 0, 524961, 0, 0, 0, 0, 0, 0, 132257, 393377, 0, 0, 0, 0, 0, 1185, 0, 0, 0, 0, 0, 0, 263329, 0, 0, 0, 0, 0, 0, 525473, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98593, 0, 0, 0, 33569, 0, 0, 164129, 0, 0, 34081, 295201, 0, 0, 0, 0, 0, 0, 98849, 562266145, 0, 0, 99361, 0, 0, 33313, 0, 0, 0, 0, 0, 0, 164385, 0, 0, 0, 34337, 0, 0, 295457, 0, 0, 0, 557601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1313, 262433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196897, 0, 0, 66849, 327969, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1825, 0, 0, 262945, 0, 0, 0, 525089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393505, 0, 0, 0, 0, 0, 1313, 0, 0, 0, 0, 0, 0, 263457, 0, 0, 0, 0, 0, 0, 525601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20563, 564134002, 12436, 45076, 4307, 0, 12564, 36947, 12437, 0, 4435, 570495059, 0, 12439, 4691, 0, 0, 4180, 20627, 53267, 242, 0, 20755, 572555378, 0, 574623891, 370, 65650, 0, 0, 626, 0, 37011, 0, 0, 0, 4499, 0, 0, 69779, 0, 0, 4755, 135315, 0, 0, 5267, 0, 0, 0, 0, 576766002, 4308, 20566, 16690, 36948, 0, 178, 4436, 69716, 0, 0, 4692, 0, 578846898, 0, 0, 4310, 434, 4311, 0, 65714, 0, 0, 690, 131250, 0, 0, 1202, 0, 0, 36950, 580944178, 583106610, 0, 0, 585138738, 0, 4438, 306, 0, 4439, 0, 4440, 0, 0, 65842, 69719, 4694, 135254, 818, 0, 5206, 131378, 4695, 0, 1330, 587465010, 0, 4697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20629, 4244, 0, 20630, 0, 20631, 0, 0, 37012, 53270, 20757, 86037, 4500, 0, 21013, 69780, 20758, 0, 4756, 589435028, 0, 20760, 5268, 0, 0, 4245, 37140, 102420, 0, 0, 37396, 4246, 0, 591401236, 0, 0, 0, 0, 0, 0, 69908, 0, 0, 0, 4884, 0, 0, 135444, 0, 0, 5396, 266516, 0, 0, 0, 0, 0, 0, 0, 37014, 4501, 37015, 0, 69781, 0, 0, 4757, 135317, 0, 0, 5269, 0, 4502, 0, 0, 4503, 0, 4504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69783, 4758, 135318, 0, 0, 5270, 0, 4759, 0, 0, 4760, 0, 4761, 0, 0, 0, 135320, 5271, 266391, 0, 0, 0, 0, 5272, 0, 0, 5273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24722, 593551378, 0, 118, 24850, 0, 0, 8338, 0, 0, 0, 0, 0, 0, 41106, 0, 0, 0, 8594, 0, 0, 73874, 0, 0, 8850, 139410, 0, 0, 9362, 0, 0, 0, 0, 32820, 0, 0, 308, 0, 597688530, 0, 0, 182, 0, 183, 0, 0, 0, 32822, 599785810, 601948242, 0, 0, 603980370, 0, 310, 0, 0, 311, 0, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49234, 0, 0, 16722, 82002, 0, 0, 16978, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 466, 0, 0, 65746, 0, 0, 722, 131282, 0, 0, 1234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98386, 0, 0, 33362, 0, 0, 338, 0, 0, 0, 0, 0, 0, 65874, 0, 0, 0, 850, 0, 0, 131410, 0, 0, 1362, 262482, 0, 0, 0, 0, 0, 0, 66130, 196690, 0, 0, 66642, 0, 0, 594, 0, 0, 0, 0, 0, 0, 131666, 0, 0, 0, 1618, 0, 0, 262738, 0, 0, 0, 524882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49298, 0, 0, 0, 16786, 0, 0, 82066, 0, 0, 17042, 147602, 0, 0, 17554, 0, 0, 0, 49426, 606191634, 0, 0, 49682, 0, 0, 16658, 0, 0, 0, 0, 0, 0, 82194, 0, 0, 0, 17170, 0, 0, 147730, 0, 0, 17682, 278802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 658, 131218, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98450, 0, 0, 33426, 163986, 0, 0, 33938, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 914, 0, 0, 131474, 0, 0, 1426, 262546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196754, 0, 0, 66706, 0, 0, 658, 0, 0, 0, 0, 0, 0, 131730, 0, 0, 0, 1682, 0, 0, 262802, 0, 0, 0, 524946, 0, 0, 0, 0, 0, 0, 132242, 393362, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 263314, 0, 0, 0, 0, 0, 0, 525458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49203, 0, 0, 16691, 117, 0, 608174259, 0, 0, 0, 0, 0, 0, 32947, 0, 0, 0, 435, 0, 0, 65715, 0, 0, 691, 131251, 0, 0, 1203, 0, 0, 0, 33075, 98355, 0, 0, 33331, 0, 0, 307, 0, 0, 0, 0, 0, 0, 65843, 0, 0, 0, 819, 0, 0, 131379, 0, 0, 1331, 262451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32884, 0, 0, 372, 65652, 0, 0, 628, 0, 245, 0, 0, 246, 0, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32886, 373, 65653, 0, 0, 629, 0, 374, 0, 0, 375, 0, 376, 0, 0, 0, 65655, 630, 131190, 0, 0, 1142, 0, 631, 0, 0, 632, 0, 633, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32948, 49206, 16693, 81973, 436, 0, 16949, 65716, 16694, 0, 692, 610402484, 0, 16696, 1204, 0, 0, 181, 33076, 98356, 0, 0, 33332, 182, 0, 612368692, 0, 0, 0, 0, 0, 0, 65844, 0, 0, 0, 820, 0, 0, 131380, 0, 0, 1332, 262452, 0, 0, 0, 0, 0, 0, 0, 32950, 437, 32951, 0, 65717, 0, 0, 693, 131253, 0, 0, 1205, 0, 438, 0, 0, 439, 0, 440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65719, 694, 131254, 0, 0, 1206, 0, 695, 0, 0, 696, 0, 697, 0, 0, 0, 131256, 1207, 262327, 0, 0, 0, 0, 1208, 0, 0, 1209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33078, 309, 0, 33079, 0, 33080, 0, 0, 65845, 98359, 33334, 163894, 821, 0, 33846, 131381, 33335, 0, 1333, 614727989, 0, 33337, 0, 0, 0, 310, 66101, 196661, 0, 0, 66613, 311, 0, 616563253, 0, 0, 0, 0, 0, 0, 131637, 0, 0, 0, 1589, 0, 0, 262709, 0, 0, 0, 524853, 0, 0, 0, 0, 0, 0, 0, 65847, 822, 65848, 0, 131382, 0, 0, 1334, 262454, 0, 0, 0, 0, 823, 0, 0, 824, 0, 825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131384, 1335, 262455, 0, 0, 0, 0, 1336, 0, 0, 1337, 0, 0, 0, 0, 0, 262457, 0, 524600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49235, 24725, 8340, 16723, 618741843, 0, 24727, 16979, 0, 41108, 620757203, 24853, 90133, 8596, 0, 25109, 73876, 24854, 0, 8852, 625090708, 0, 24856, 9364, 0, 0, 8341, 41236, 106516, 467, 0, 41492, 627114195, 0, 629154068, 723, 131283, 0, 0, 1235, 0, 74004, 0, 0, 0, 8980, 0, 0, 139540, 0, 0, 9492, 270612, 0, 0, 0, 0, 0, 0, 0, 631341139, 8597, 41111, 33363, 73877, 0, 339, 8853, 139413, 0, 0, 9365, 0, 633405779, 0, 0, 8599, 851, 8600, 0, 131411, 0, 0, 1363, 262483, 0, 0, 0, 0, 0, 73879, 635503187, 637730899, 0, 0, 639698003, 0, 8855, 595, 0, 8856, 0, 8857, 0, 0, 131667, 139416, 9367, 270487, 1619, 0, 0, 262739, 9368, 0, 0, 642253395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49299, 0, 340, 65620, 16787, 0, 596, 82067, 0, 0, 17043, 147603, 0, 0, 17555, 0, 0, 0, 49427, 643940371, 0, 215, 49683, 0, 0, 16659, 0, 0, 0, 0, 0, 0, 82195, 0, 0, 0, 17171, 0, 0, 147731, 0, 0, 17683, 278803, 0, 0, 0, 0, 0, 0, 0, 65621, 0, 0, 597, 0, 648020371, 0, 0, 343, 0, 344, 0, 0, 0, 65623, 650117779, 652345491, 0, 0, 654312595, 0, 599, 0, 0, 600, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98451, 0, 0, 33427, 163987, 0, 0, 33939, 0, 0, 403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 915, 0, 0, 131475, 0, 0, 1427, 262547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196755, 0, 0, 66707, 0, 0, 659, 0, 0, 0, 0, 0, 0, 131731, 0, 0, 0, 1683, 0, 0, 262803, 0, 0, 0, 524947, 0, 0, 0, 0, 0, 0, 132243, 393363, 0, 0, 0, 0, 0, 1171, 0, 0, 0, 0, 0, 0, 263315, 0, 0, 0, 0, 0, 0, 525459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49238, 16725, 82005, 468, 0, 16981, 65748, 16726, 0, 724, 656539860, 0, 16728, 1236, 0, 0, 82007, 16982, 147542, 0, 0, 17494, 0, 16983, 0, 0, 16984, 0, 16985, 0, 0, 0, 0, 0, 98388, 0, 0, 33364, 214, 0, 658506068, 0, 0, 0, 0, 0, 0, 65876, 0, 0, 0, 852, 0, 0, 131412, 0, 0, 1364, 262484, 0, 0, 0, 0, 0, 0, 66132, 196692, 0, 0, 66644, 0, 0, 596, 0, 0, 0, 0, 0, 0, 131668, 0, 0, 0, 1620, 0, 0, 262740, 0, 0, 0, 524884, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65749, 0, 0, 725, 131285, 0, 0, 1237, 0, 470, 0, 0, 471, 0, 472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65751, 726, 131286, 0, 0, 1238, 0, 727, 0, 0, 728, 0, 729, 0, 0, 0, 131288, 1239, 262359, 0, 0, 0, 0, 1240, 0, 0, 1241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65877, 98391, 33366, 163926, 853, 0, 33878, 131413, 33367, 0, 1365, 660865365, 0, 33369, 0, 0, 0, 342, 66133, 196693, 0, 0, 66645, 343, 0, 662700629, 0, 0, 0, 0, 0, 0, 131669, 0, 0, 0, 1621, 0, 0, 262741, 0, 0, 0, 524885, 0, 0, 0, 0, 0, 0, 0, 65879, 854, 65880, 0, 131414, 0, 0, 1366, 262486, 0, 0, 0, 0, 855, 0, 0, 856, 0, 857, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131416, 1367, 262487, 0, 0, 0, 0, 1368, 0, 0, 1369, 0, 0, 0, 0, 0, 262489, 0, 524632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66135, 598, 0, 66136, 0, 66137, 0, 0, 131670, 196696, 66647, 327767, 1622, 0, 0, 262742, 66648, 0, 0, 665322070, 0, 0, 0, 0, 0, 599, 132182, 393302, 0, 0, 0, 600, 0, 666895446, 0, 0, 0, 0, 0, 0, 263254, 0, 0, 0, 0, 0, 0, 525398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131672, 1623, 131673, 0, 262743, 0, 0, 0, 524887, 0, 0, 0, 0, 1624, 0, 0, 1625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262745, 0, 524888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49302, 16789, 49303, 0, 82069, 404, 0, 17045, 147605, 0, 0, 17557, 0, 16790, 0, 660, 671219860, 0, 16792, 1172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82071, 17046, 147606, 0, 0, 17558, 0, 17047, 0, 0, 17048, 0, 17049, 0, 0, 0, 147608, 17559, 278679, 0, 0, 0, 0, 17560, 0, 0, 17561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98452, 49430, 16661, 33428, 673349780, 0, 49432, 33940, 0, 82197, 679477652, 49686, 180246, 17173, 0, 50198, 147733, 49687, 0, 17685, 686047509, 0, 49689, 0, 0, 0, 16662, 82453, 213013, 916, 0, 82965, 687997332, 0, 692077077, 1428, 262548, 0, 0, 0, 0, 147989, 0, 0, 0, 17941, 0, 0, 279061, 0, 0, 0, 541205, 0, 0, 0, 0, 0, 0, 0, 694354068, 17174, 82200, 66708, 147734, 0, 660, 17686, 278806, 0, 0, 0, 0, 696386196, 0, 0, 17176, 1684, 17177, 0, 262804, 0, 0, 0, 524948, 0, 0, 0, 0, 0, 147736, 698483860, 700842132, 0, 0, 0, 0, 17688, 1172, 0, 17689, 0, 0, 0, 0, 263316, 278809, 0, 540952, 0, 0, 0, 525460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98580, 0, 661, 131221, 33556, 0, 1173, 164116, 0, 0, 34068, 295188, 0, 0, 0, 0, 0, 0, 98836, 702775316, 0, 408, 99348, 0, 0, 33300, 0, 0, 0, 0, 0, 0, 164372, 0, 0, 0, 34324, 0, 0, 295444, 0, 0, 0, 557588, 0, 0, 0, 0, 0, 0, 0, 131222, 0, 0, 1174, 0, 706741012, 0, 0, 664, 0, 665, 0, 0, 0, 131224, 708838676, 711196948, 0, 0, 0, 0, 1176, 0, 0, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196884, 0, 0, 66836, 327956, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1812, 0, 0, 262932, 0, 0, 0, 525076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393492, 0, 0, 0, 0, 0, 1300, 0, 0, 0, 0, 0, 0, 263444, 0, 0, 0, 0, 0, 0, 525588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98455, 33430, 163990, 917, 0, 33942, 131477, 33431, 0, 1429, 713294229, 0, 33433, 0, 0, 0, 163992, 33943, 295063, 0, 0, 0, 0, 33944, 0, 0, 33945, 0, 0, 0, 0, 0, 0, 0, 196757, 0, 0, 66709, 407, 0, 715129493, 0, 0, 0, 0, 0, 0, 131733, 0, 0, 0, 1685, 0, 0, 262805, 0, 0, 0, 524949, 0, 0, 0, 0, 0, 0, 132245, 393365, 0, 0, 0, 0, 0, 1173, 0, 0, 0, 0, 0, 0, 263317, 0, 0, 0, 0, 0, 0, 525461, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131478, 0, 0, 1430, 262550, 0, 0, 0, 0, 919, 0, 0, 920, 0, 921, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131480, 1431, 262551, 0, 0, 0, 0, 1432, 0, 0, 1433, 0, 0, 0, 0, 0, 262553, 0, 524696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131734, 196760, 66711, 327831, 1686, 0, 0, 262806, 66712, 0, 0, 717750934, 0, 0, 0, 0, 0, 663, 132246, 393366, 0, 0, 0, 664, 0, 719324310, 0, 0, 0, 0, 0, 0, 263318, 0, 0, 0, 0, 0, 0, 525462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131736, 1687, 131737, 0, 262807, 0, 0, 0, 524951, 0, 0, 0, 0, 1688, 0, 0, 1689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262809, 0, 524952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132248, 1175, 0, 132249, 0, 0, 0, 0, 263319, 393369, 0, 655512, 0, 0, 0, 525463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1176, 0, 786583, 0, 0, 0, 1177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263321, 0, 0, 0, 525464]
        , dtype=jnp.int32,
    )
    # fmt: on

    断么九 = 0
    平和 = 1
    一盃口 = 2
    二盃口 = 3

    FAN = jnp.array([1, 1, 1, 3])

    MAX_PATTERNS = 4

    @staticmethod
    @jit
    def shift(code: int) -> int:
        code -= (code >> 12 > 1) << 12
        code -= (code >> 9 > 1) << 9
        code -= (code >> 6 > 1) << 6
        code -= (code >> 3 > 1) << 3
        code -= code > 1
        return code

    @staticmethod
    @jit
    def head(code: int) -> int:
        return Yaku.CACHE_SUITED[code] & 0b1111

    @staticmethod
    @jit
    def chow(code: int) -> int:
        return Yaku.CACHE_SUITED[code] >> 4 & 0b1111111

    @staticmethod
    @jit
    def pung(code: int) -> int:
        return Yaku.CACHE_SUITED[code] >> 11 & 0b111111111

    @staticmethod
    @jit
    def twice_double_chows(code: int) -> int:
        return Yaku.CACHE_SUITED[code] >> 20 & 1

    @staticmethod
    @jit
    def next(code: int) -> int:
        next = Yaku.CACHE_SUITED[code] >> 21
        return next | (next == 0) * code

    @staticmethod
    @jit
    def is_pinfu(code: int, begin: int, end: int, last: int) -> bool:
        len = end - begin
        left = Yaku.chow(code)
        right = Yaku.chow(code) << 3
        open_end = (left ^ (left & 1) * (begin % 9 == 0)) << 2 | (
            right ^ (right >> len & 1) * (end % 9 == 0) << len
        ) >> 3
        pos = last - begin
        return jax.lax.cond(
            (0 <= pos) & (pos < len),
            lambda: (open_end >> pos & 1) == 1,
            lambda: True,
        ) & (Yaku.pung(code) == 0)

    @staticmethod
    @jit
    def double_chows(code: int, sum: int) -> int:
        chow = Yaku.chow(code)
        pung = Yaku.pung(code)

        unique = (
            (chow & 1)
            + (chow >> 1 & 1)
            + (chow >> 2 & 1)
            + (chow >> 3 & 1)
            + (chow >> 4 & 1)
            + (chow >> 5 & 1)
            + (chow >> 6 & 1)
            + (pung & 1)
            + (pung >> 1 & 1)
            + (pung >> 2 & 1)
            + (pung >> 3 & 1)
            + (pung >> 4 & 1)
            + (pung >> 5 & 1)
            + (pung >> 6 & 1)
            + (pung >> 7 & 1)
            + (pung >> 8 & 1)
        )

        return (sum // 3 > unique) + Yaku.twice_double_chows(code)

    @staticmethod
    @jit
    def judge(
        hand: jnp.ndarray,
        melds: jnp.ndarray,
        meld_num: int,
        last: int,
    ) -> jnp.ndarray:
        # assert Hand.can_tsumo(hand)

        menzen = meld_num == 0

        is_pinfu = jnp.full(
            Yaku.MAX_PATTERNS,
            menzen
            & jnp.all(hand[28:31] < 3)
            & (hand[27] == 0)
            & jnp.all(hand[31:34] == 0),
        )
        # NOTE: 南,西,北: オタ風扱い

        double_chows = jnp.full(Yaku.MAX_PATTERNS, 0)

        for suit in range(3):
            code = 0
            begin = 9 * suit
            sum = 0
            for tile in range(9 * suit, 9 * (suit + 1)):
                code, is_pinfu, double_chows, begin, sum = jax.lax.cond(
                    hand[tile] == 0,
                    lambda: (
                        0,
                        *jax.lax.fori_loop(
                            0,
                            Yaku.MAX_PATTERNS,
                            lambda i, tpl: (
                                Yaku.next(tpl[0]),
                                tpl[1]
                                .at[i]
                                .set(
                                    tpl[1][i]
                                    & Yaku.is_pinfu(tpl[0], begin, tile, last)
                                ),
                                tpl[2]
                                .at[i]
                                .set(
                                    tpl[2][i] + Yaku.double_chows(tpl[0], sum)
                                ),
                            ),
                            (Yaku.shift(code), is_pinfu, double_chows),
                        )[1:],
                        tile + 1,
                        0,
                    ),
                    lambda: (
                        ((code << 1) + 1) << (hand[tile].astype(int) - 1),
                        is_pinfu,
                        double_chows,
                        begin,
                        sum + hand[tile].astype(int),
                    ),
                )

            is_pinfu, double_chows = jax.lax.fori_loop(
                0,
                Yaku.MAX_PATTERNS,
                lambda i, tpl: (
                    Yaku.next(tpl[0]),
                    tpl[1]
                    .at[i]
                    .set(
                        tpl[1][i]
                        & Yaku.is_pinfu(tpl[0], begin, 9 * (suit + 1), last)
                    ),
                    tpl[2]
                    .at[i]
                    .set(tpl[2][i] + Yaku.double_chows(tpl[0], sum)),
                ),
                (Yaku.shift(code), is_pinfu, double_chows),
            )[1:]

        yaku = jnp.full((Yaku.MAX_PATTERNS, 4), False)
        for i in range(Yaku.MAX_PATTERNS):
            yaku = yaku.at[(i, Yaku.平和)].set(is_pinfu[i])
            yaku = yaku.at[(i, Yaku.一盃口)].set(menzen & (double_chows[i] == 1))
            yaku = yaku.at[(i, Yaku.二盃口)].set(menzen & (double_chows[i] == 2))

        yaku = yaku[jnp.argmax(jnp.dot(yaku, Yaku.FAN))]

        flatten = Yaku.flatten(hand, melds, meld_num)
        return yaku.at[Yaku.断么九].set(Yaku._is_tanyao(flatten))

    @staticmethod
    @jit
    def flatten(
        hand: jnp.ndarray, melds: jnp.ndarray, meld_num: int
    ) -> jnp.ndarray:
        return jax.lax.fori_loop(
            0, meld_num, lambda i, arr: Yaku._flatten(arr, melds[i]), hand
        )

    @staticmethod
    @jit
    def _flatten(hand: jnp.ndarray, meld: int) -> jnp.ndarray:
        target, action = Meld.target(meld), Meld.action(meld)
        return jax.lax.switch(
            action - Action.PON,
            [
                lambda: Hand.add(hand, target, 3),
                lambda: Hand.add(
                    Hand.add(Hand.add(hand, target - 2), target - 1), target
                ),
                lambda: Hand.add(
                    Hand.add(Hand.add(hand, target - 1), target + 1), target
                ),
                lambda: Hand.add(
                    Hand.add(Hand.add(hand, target + 1), target + 2), target
                ),
            ],
        )

    @staticmethod
    @jit
    def _is_tanyao(hand: jnp.ndarray) -> bool:
        return (
            (hand[0] == 0)
            & (hand[8] == 0)
            & (hand[9] == 0)
            & (hand[17] == 0)
            & (hand[18] == 0)
            & jnp.all(hand[26:] == 0)
        )


@dataclass
class State:
    deck: Deck
    hand: jnp.ndarray
    turn: int  # 手牌が3n+2枚, もしくは直前に牌を捨てたplayer
    target: int  # 直前に捨てられてron,pon,chi の対象になっている牌. 存在しなければ-1
    last_draw: int  # 手牌が3n+2枚のplayerが直前に引いた牌. 存在しなければ-1
    riichi_declared: bool  # state.turn がリーチ宣言してから, その直後の打牌が通るまでTrue
    riichi: jnp.ndarray  # 各playerのリーチが成立しているかどうか
    meld_num: jnp.ndarray  # 各playerの副露回数
    melds: jnp.ndarray
    # melds[i][j]: player i のj回目の副露(j=1,2,3,4). 存在しなければ0

    # reward:
    # - player0 がplayer1 からロン => [ 2,-2, 0, 0]
    # - player0 がツモ             => [ 2,-2,-2,-2]
    # - 流局時 全員聴牌            => [ 1, 1, 1, 1]
    # - 流局時 全員ノー聴          => [-1,-1,-1,-1]
    # - 流局時 player0 だけ聴牌    => [ 1,-1,-1,-1]

    @jit
    def legal_actions(self) -> jnp.ndarray:
        legal_actions = jnp.full((4, 43), False)

        # リーチ
        legal_actions = jax.lax.cond(
            (self.last_draw == -1)
            | self.riichi_declared
            | self.riichi[self.turn]
            | (self.deck.size() < 4)
            # | (jnp.sum(self.hand[self.turn]) < 14),
            | (self.meld_num[self.turn]),
            lambda: legal_actions,
            lambda: legal_actions.at[(self.turn, Action.RIICHI)].set(
                Hand.can_riichi(self.hand[self.turn])
            ),
        )

        # リーチ宣言直後の打牌
        legal_actions = jax.lax.cond(
            (self.last_draw != -1) & self.riichi_declared,
            lambda arr: jax.lax.fori_loop(
                0,
                34,
                lambda i, arr: arr.at[(self.turn, i)].set(
                    jax.lax.cond(
                        self.hand[self.turn][i] > (i == self.last_draw),
                        lambda: Hand.is_tenpai(
                            Hand.sub(self.hand[self.turn], i)
                        ),
                        lambda: False,
                    )
                ),
                arr,
            )
            .at[(self.turn, Action.TSUMOGIRI)]
            .set(
                Hand.is_tenpai(Hand.sub(self.hand[self.turn], self.last_draw))
            ),
            lambda arr: arr,
            legal_actions,
        )

        # ツモ切り, ツモ
        legal_actions = jax.lax.cond(
            (self.last_draw == -1) | self.riichi_declared,
            lambda: legal_actions,
            lambda: legal_actions.at[(self.turn, Action.TSUMOGIRI)]
            .set(True)
            .at[(self.turn, Action.TSUMO)]
            .set(Hand.can_tsumo(self.hand[self.turn])),
        )

        # 手出し, 鳴いた後の手出し
        legal_actions = jax.lax.cond(
            (self.target != -1)
            | self.riichi_declared
            | self.riichi[self.turn],
            lambda arr: arr,
            lambda arr: jax.lax.fori_loop(
                0,
                34,
                lambda i, arr: arr.at[(self.turn, i)].set(
                    self.hand[self.turn][i] > (i == self.last_draw),
                ),
                arr,
            ),
            legal_actions,
        )

        for player in range(4):
            # ロン
            legal_actions = jax.lax.cond(
                (self.target == -1) | (player == self.turn),
                lambda: legal_actions,
                lambda: legal_actions.at[(player, Action.RON)].set(
                    Hand.can_ron(self.hand[player], self.target)
                ),
            )
            # ポン
            legal_actions = jax.lax.cond(
                (self.target == -1)
                | (player == self.turn)
                | self.deck.is_empty()
                | self.riichi[player],
                lambda: legal_actions,
                lambda: legal_actions.at[(player, Action.PON)].set(
                    Hand.can_pon(self.hand[player], self.target)
                ),
            )
            # チー
            legal_actions = jax.lax.cond(
                (self.target == -1)
                | (player != (self.turn + 1) % 4)
                | self.deck.is_empty()
                | self.riichi[player],
                lambda: legal_actions,
                lambda: legal_actions.at[(player, Action.CHI_R)]
                .set(
                    Hand.can_chi(self.hand[player], self.target, Action.CHI_R)
                )
                .at[(player, Action.CHI_M)]
                .set(
                    Hand.can_chi(self.hand[player], self.target, Action.CHI_M)
                )
                .at[(player, Action.CHI_L)]
                .set(
                    Hand.can_chi(self.hand[player], self.target, Action.CHI_L)
                ),
            )
            legal_actions = legal_actions.at[(player, Action.PASS)].set(
                (player != self.turn) & jnp.any(legal_actions[player])
            )

        return legal_actions

    def observe(self, player: int) -> Observation:
        return Observation(self.hand[player], self.target, self.last_draw)

    @staticmethod
    @jit
    def init(key) -> State:
        deck = Deck.init(key)
        hand = jnp.zeros((4, 34), dtype=jnp.uint8)

        for i in range(4):
            for _ in range(13):
                deck, tile = Deck.draw(deck)
                hand = hand.at[i].set(Hand.add(hand[i], tile))

        deck, tile = Deck.draw(deck)
        hand = hand.at[0].set(Hand.add(hand[0], tile))

        turn = 0
        target = -1
        last_draw = tile
        riichi_declared = False
        riichi = jnp.full(4, False)
        meld_num = jnp.zeros(4, dtype=jnp.uint8)
        melds = jnp.zeros((4, 4), dtype=jnp.uint32)
        return State(
            deck,
            hand,
            turn,
            target,
            last_draw,
            riichi_declared,
            riichi,
            meld_num,
            melds,
        )

    @staticmethod
    @jit
    def step(
        state: State, actions: jnp.ndarray
    ) -> tuple[State, jnp.ndarray, bool]:
        player = jnp.argmin(actions)
        return State._step(state, player, actions[player])

    @staticmethod
    @jit
    def _step(
        state: State, player: int, action: int
    ) -> tuple[State, jnp.ndarray, bool]:
        return jax.lax.cond(
            action < 34,
            lambda: State._discard(state, action),
            lambda: jax.lax.switch(
                action - 34,
                [
                    lambda: State._tsumogiri(state),
                    lambda: State._riichi(state),
                    lambda: State._tsumo(state),
                    lambda: State._ron(state, player),
                    lambda: State._pon(state, player),
                    lambda: State._chi(state, player, Action.CHI_R),
                    lambda: State._chi(state, player, Action.CHI_M),
                    lambda: State._chi(state, player, Action.CHI_L),
                    lambda: State._try_draw(state),
                ],
            ),
        )

    @staticmethod
    @jit
    def _tsumogiri(state: State) -> tuple[State, jnp.ndarray, bool]:
        return State._discard(state, state.last_draw)

    @staticmethod
    @jit
    def _discard(state: State, tile: int) -> tuple[State, jnp.ndarray, bool]:
        state.hand = state.hand.at[state.turn].set(
            Hand.sub(state.hand[state.turn], tile)
        )
        state.target = tile
        state.last_draw = -1
        return jax.lax.cond(
            jnp.any(state.legal_actions()),
            lambda: (state, jnp.full(4, 0), False),
            lambda: State._try_draw(state),
        )

    @staticmethod
    @jit
    def _try_draw(state: State) -> tuple[State, jnp.ndarray, bool]:
        state.target = -1
        return jax.lax.cond(
            state.deck.is_empty(),
            lambda: State._ryukyoku(state),
            lambda: State._draw(state),
        )

    @staticmethod
    @jit
    def _accept_riichi(state: State) -> State:
        state.riichi = state.riichi.at[state.turn].set(
            state.riichi[state.turn] | state.riichi_declared
        )
        state.riichi_declared = False
        return state

    @staticmethod
    @jit
    def _draw(state: State) -> tuple[State, jnp.ndarray, bool]:
        state = State._accept_riichi(state)
        state.turn += 1
        state.turn %= 4
        state.deck, tile = Deck.draw(state.deck)
        state.last_draw = tile
        state.hand = state.hand.at[state.turn].set(
            Hand.add(state.hand[state.turn], tile)
        )
        return state, jnp.full(4, 0), False

    @staticmethod
    @jit
    def _ryukyoku(state: State) -> tuple[State, jnp.ndarray, bool]:
        reward = jnp.array(
            [2 * Hand.is_tenpai(state.hand[i]) - 1 for i in range(4)]
        )
        return state, reward, True

    @staticmethod
    @jit
    def _ron(state: State, player: int) -> tuple[State, jnp.ndarray, bool]:
        return (
            state,
            jnp.full(4, 0).at[state.turn].set(-2).at[player].set(2),
            True,
        )

    @staticmethod
    @jit
    def _append_meld(state: State, meld: int, player: int) -> State:
        state.melds = state.melds.at[(player, state.meld_num[player])].set(
            meld
        )
        state.meld_num = state.meld_num.at[player].set(
            state.meld_num[player] + 1
        )
        return state

    @staticmethod
    @jit
    def _pon(state: State, player: int) -> tuple[State, jnp.ndarray, bool]:
        state = State._accept_riichi(state)
        meld = Meld.init(Action.PON, state.target, state.turn)
        state = State._append_meld(state, meld, player)
        state.hand = state.hand.at[player].set(
            Hand.pon(state.hand[player], state.target)
        )
        state.target = -1
        state.turn = player
        return state, jnp.full(4, 0), False

    @staticmethod
    @jit
    def _chi(
        state: State, player: int, action: int
    ) -> tuple[State, jnp.ndarray, bool]:
        state = State._accept_riichi(state)
        meld = Meld.init(action, state.target, state.turn)
        state = State._append_meld(state, meld, player)
        state.hand = state.hand.at[player].set(
            Hand.chi(state.hand[player], state.target, action)
        )
        state.target = -1
        state.turn = player
        return state, jnp.full(4, 0), False

    @staticmethod
    @jit
    def _tsumo(state: State) -> tuple[State, jnp.ndarray, bool]:
        return state, jnp.full(4, -2).at[state.turn].set(2), True

    @staticmethod
    @jit
    def _riichi(state: State) -> tuple[State, jnp.ndarray, bool]:
        state.riichi_declared = True
        return state, jnp.full(4, 0), False

    def _tree_flatten(self):
        children = (
            self.deck,
            self.hand,
            self.turn,
            self.target,
            self.last_draw,
            self.riichi_declared,
            self.riichi,
            self.meld_num,
            self.melds,
        )
        aux_data = {}
        return (children, aux_data)

    @classmethod
    def _tree_unflatten(cls, aux_data, children):
        return cls(*children, **aux_data)


tree_util.register_pytree_node(
    State, State._tree_flatten, State._tree_unflatten
)


@jit
def init(key) -> State:
    return State.init(key)


@jit
def step(
    state: State, actions: jnp.ndarray
) -> tuple[State, jnp.ndarray, bool]:
    return State.step(state, actions)
