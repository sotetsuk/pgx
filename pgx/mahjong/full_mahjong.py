from __future__ import annotations

from dataclasses import dataclass

import jax
import jax.numpy as jnp
from jax import jit, tree_util


class Tile:
    @staticmethod
    def to_str(tile: int) -> str:
        suit, num = tile // 9, tile % 9 + 1
        return str(num) + ["m", "p", "s", "z"][suit]


class Action:
    # 手出し: 0~33
    TSUMOGIRI = 34
    RIICHI = 35
    TSUMO = 36

    RON = 37
    PON = 38
    CHI_R = 39  # 45[6]
    CHI_M = 40  # 4[5]6
    CHI_L = 41  # [4]56
    PASS = 42

    NONE = 43


@dataclass
class Deck:
    idx: int
    arr: jnp.ndarray

    @jit
    def is_empty(self) -> bool:
        return self.size() == 0

    @jit
    def size(self) -> int:
        return 122 - self.idx

    def _tree_flatten(self):
        children = (self.idx, self.arr)
        aux_data = {}
        return (children, aux_data)

    @staticmethod
    @jit
    def init(key: jnp.ndarray) -> Deck:
        arr = jax.random.permutation(key, jnp.arange(136) // 4)
        return Deck(0, arr)

    @staticmethod
    @jit
    def draw(deck: Deck) -> tuple[Deck, int]:
        # assert not deck.is_empty()
        tile = deck.arr[deck.idx]
        deck.idx += 1
        return deck, tile

    @classmethod
    def _tree_unflatten(cls, aux_data, children):
        return cls(*children, **aux_data)


tree_util.register_pytree_node(Deck, Deck._tree_flatten, Deck._tree_unflatten)


class Hand:
    # fmt: off
    CACHE_SUITED = jnp.array(
        [1385955477, 2569143448, 0, 0, 3686684160, 2569143708, 5413232, 1385976476, 2569142272, 2569143448, 9961984, 0, 301312, 39200, 2569143440, 2569143448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14326640, 1385976476, 3686719232, 2569182652, 2574425584, 3686684316, 2579103744, 2569143512, 1385976464, 0, 301312, 39200, 2569143440, 421659800, 0, 1386011580, 2569143696, 2569143448, 5413120, 1385976476, 0, 0, 3686662144, 2569143708, 5413232, 1385976476, 3686684160, 421660060, 5413232, 303846044, 0, 0, 0, 0, 301312, 39200, 2569143440, 2569143448, 2569142272, 2569143448, 9961984, 0, 301312, 39200, 2569143440, 421659800, 0, 4, 39200, 0, 2569143296, 2569143448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2569143440, 2569143448, 9961984, 0, 0, 0, 262144, 39200, 2569143440, 421659800, 0, 0, 0, 0, 0, 2569143448, 9961984, 0, 301312, 39200, 421659792, 287442072, 2569142272, 421659800, 9961984, 0, 301312, 6432, 287442064, 16909336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1386011580, 2569182640, 2569143448, 2574425344, 3686684316, 0, 0, 3686662144, 2569143708, 5413232, 1385976476, 3686684160, 421660060, 5413232, 303846044, 0, 0, 2583338992, 3686684316, 3686719232, 2569182652, 2574425584, 1539200668, 2579365888, 2569182712, 3686684304, 421659800, 301312, 39200, 421659792, 287442072, 0, 3686719420, 2579105680, 421659800, 5675264, 1386011580, 421659792, 287442072, 3686662144, 421660060, 14326640, 303846044, 1539235584, 287448508, 292691440, 18224668, 0, 0, 0, 0, 2569444608, 2569182648, 2569143440, 421659800, 2574385152, 3686684316, 9961984, 0, 301312, 39200, 421659792, 287442072, 0, 2569143708, 5413232, 1385976476, 3686684160, 421660060, 5413232, 303846044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2569143440, 421659800, 9961984, 0, 0, 0, 262144, 39200, 421659792, 287442072, 0, 0, 0, 0, 0, 421659800, 9961984, 0, 301312, 6432, 287442064, 16909336, 421658624, 287442072, 1573376, 0, 268544, 4384, 16909328, 16, 0, 0, 0, 0, 0, 0, 0, 0, 3686662144, 2569182652, 2574425584, 1539200668, 3686684160, 421660060, 5413232, 303846044, 0, 2569143512, 1385976464, 0, 301312, 39200, 421659792, 287442072, 2569142272, 421659800, 9961984, 0, 301312, 6432, 287442064, 16909336, 0, 0, 2569143696, 421659800, 5413120, 1385976476, 0, 0, 3686662144, 421660060, 5413232, 303846044, 1539200512, 287442332, 5380464, 1315356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3686719232, 421699004, 426941936, 322852508, 2579103744, 421659864, 1385976464, 0, 301312, 6432, 287442064, 16909336, 0, 1386011580, 421660048, 287442072, 5413120, 303846044, 0, 0, 1539178496, 287442332, 5380464, 1315356, 322852352, 16909596, 1184112, 20, 0, 0, 14326640, 303846044, 1539235584, 287448508, 292691440, 18224668, 431620096, 287442136, 303846032, 0, 268544, 4384, 16909328, 16, 0, 303848380, 287442320, 16909336, 5380352, 1315356, 0, 0, 322830336, 16909596, 1184112, 20, 18224640, 276, 272]
        , dtype=jnp.uint32,
    )
    # fmt: on
    CACHE_HONOR = jnp.array([1, 0, 1, 1, 0])

    @staticmethod
    @jit
    def cache_suited(code: int) -> int:
        return (Hand.CACHE_SUITED[code >> 5] >> (code & 0b11111)) & 1

    @staticmethod
    @jit
    def can_ron(hand: jnp.ndarray, tile: int) -> bool:
        # assert jnp.sum(hand) % 3 == 1
        # assert hand[tile] < 4
        return Hand.can_tsumo(Hand.add(hand, tile))

    @staticmethod
    @jit
    def can_riichi(hand: jnp.ndarray) -> bool:
        # assert: hand is menzen
        return jax.lax.fori_loop(
            0,
            34,
            lambda i, sum: jax.lax.cond(
                hand[i] == 0,
                lambda: sum,
                lambda: sum | Hand.is_tenpai(Hand.sub(hand, i)),
            ),
            False,
        )

    @staticmethod
    @jit
    def is_tenpai(hand: jnp.ndarray) -> bool:
        # assert jnp.sum(hand) % 3 == 1
        return jax.lax.fori_loop(
            0,
            34,
            lambda tile, sum: jax.lax.cond(
                hand[tile] == 4,
                lambda: False,
                lambda: sum | Hand.can_ron(hand, tile),
            ),
            False,
        )

    @staticmethod
    @jit
    def can_tsumo(hand: jnp.ndarray) -> bool:
        # assert jnp.sum(hand) % 3 == 2
        heads = 0
        valid = True

        for i in range(3):
            heads, valid, code, size = jax.lax.fori_loop(
                0,
                9,
                lambda j, tpl: jax.lax.cond(
                    hand[9 * i + j] == 0,
                    lambda: (
                        tpl[0] + (tpl[3] % 3 == 2),
                        tpl[1] & (Hand.cache_suited(tpl[2]) != 0),
                        0,
                        0,
                    ),
                    lambda: (
                        tpl[0],
                        tpl[1],
                        ((tpl[2] << 1) + 1)
                        << (hand[9 * i + j].astype(int) - 1),
                        tpl[3] + hand[9 * i + j].astype(int),
                    ),
                ),
                (heads, valid, 0, 0),
            )

            heads += size % 3 == 2
            valid &= Hand.cache_suited(code) != 0

        heads, valid = jax.lax.fori_loop(
            27,
            34,
            lambda i, tpl: (
                tpl[0] + (hand[i] % 3 == 2),
                tpl[1] & (Hand.CACHE_HONOR[hand[i]] != 0),
            ),
            (heads, valid),
        )

        return valid & (heads == 1)

    @staticmethod
    @jit
    def can_pon(hand: jnp.ndarray, tile: int) -> bool:
        return hand[tile] >= 2

    @staticmethod
    @jit
    def can_chi(hand: jnp.ndarray, tile: int, action: int) -> bool:
        # assert jnp.sum(hand) % 3 == 1
        # assert action is Action.CHI_R, CHI_M or CHI_L
        return jax.lax.switch(
            action - Action.CHI_R,
            [
                lambda: (
                    (tile < 27)
                    & (tile % 9 > 1)
                    & (hand[tile - 2] > 0)
                    & (hand[tile - 1] > 0)
                ),
                lambda: (
                    (tile < 27)
                    & (tile % 9 > 0)
                    & (tile % 9 < 8)
                    & (hand[tile - 1] > 0)
                    & (hand[tile + 1] > 0)
                ),
                lambda: (
                    (tile < 27)
                    & (tile % 9 < 7)
                    & (hand[tile + 1] > 0)
                    & (hand[tile + 2] > 0)
                ),
            ],
        )

    @staticmethod
    @jit
    def add(hand: jnp.ndarray, tile: int, x: int = 1) -> jnp.ndarray:
        # assert 0 <= hand[tile] + x <= 4
        return hand.at[tile].set(hand[tile] + x)

    @staticmethod
    @jit
    def sub(hand: jnp.ndarray, tile: int, x: int = 1) -> jnp.ndarray:
        # assert 0 <= hand[tile] - x <= 4
        return Hand.add(hand, tile, -x)

    @staticmethod
    @jit
    def pon(hand: jnp.ndarray, tile: int) -> jnp.ndarray:
        # assert Hand.can_pon(hand, tile)
        return Hand.sub(hand, tile, 2)

    @staticmethod
    @jit
    def chi(hand: jnp.ndarray, tile: int, action: int) -> jnp.ndarray:
        # assert Hand.can_chi(hand, tile, action)
        # assert action is Action.CHI_R, CHI_M or CHI_L
        return jax.lax.switch(
            action - Action.CHI_R,
            [
                lambda: Hand.sub(Hand.sub(hand, tile - 2), tile - 1),
                lambda: Hand.sub(Hand.sub(hand, tile - 1), tile + 1),
                lambda: Hand.sub(Hand.sub(hand, tile + 1), tile + 2),
            ],
        )

    @staticmethod
    def to_str(hand: jnp.ndarray) -> str:
        s = ""
        for i in range(4):
            t = ""
            for j in range(9 if i < 3 else 7):
                t += str(j + 1) * hand[9 * i + j]
            if t:
                t += ["m", "p", "s", "z"][i]
            s += t
        return s

    @staticmethod
    def from_str(s: str) -> jnp.ndarray:
        base = 0
        hand = jnp.zeros(34, dtype=jnp.uint8)
        for c in reversed(s):
            if c == "m":
                base = 0
            elif c == "p":
                base = 9
            elif c == "s":
                base = 18
            elif c == "z":
                base = 27
            else:
                hand = Hand.add(hand, ord(c) - ord("1") + base)
        return hand


@dataclass
class Observation:
    hand: jnp.ndarray
    target: int
    last_draw: int


class Meld:
    @staticmethod
    @jit
    def init(action: int, target: int, src: int) -> int:
        return (src << 12) | (target << 6) | action

    @staticmethod
    def to_str(meld: int) -> str:
        action = Meld.action(meld)
        target = Meld.target(meld)
        suit, num = target // 9, target % 9 + 1
        if action == Action.PON:
            return "{}{}{}{}".format(num, num, num, ["m", "p", "s", "z"][suit])
        if action == Action.CHI_R:
            return "{}{}{}{}".format(
                num - 2, num - 1, num, ["m", "p", "s", "z"][suit]
            )
        if action == Action.CHI_M:
            return "{}{}{}{}".format(
                num - 1, num, num + 1, ["m", "p", "s", "z"][suit]
            )
        if action == Action.CHI_L:
            return "{}{}{}{}".format(
                num, num + 1, num + 2, ["m", "p", "s", "z"][suit]
            )
        return ""

    @staticmethod
    @jit
    def target(meld: int) -> int:
        return (meld >> 6) & 0b111111

    @staticmethod
    @jit
    def action(meld: int) -> int:
        return meld & 0b111111


class Yaku:
    # fmt: off
    CACHE_SUITED = jnp.array(
        [0, 2083, 19, 16, 2048, 2099, 6179, 16, 9451523, 19, 6212, 2083, 2084, 10275, 2147, 2211, 34851, 2339, 2049, 16, 4096, 2342, 25165856, 32, 51, 17, 83, 147, 18, 32787, 19, 275, 4180, 52, 8341, 2064, 6144, 85, 16662, 2080, 150, 14352, 16, 48, 80, 48250896, 2080, 144, 48, 4112, 80, 144, 56623123, 48, 14355, 6228, 8208, 2099, 2100, 80, 16400, 2163, 2227, 144, 34867, 2355, 2358, 10389, 2133, 18710, 2198, 75497520, 76560419, 51, 52, 6243, 6244, 6307, 38947, 6435, 6438, 85997635, 83, 88094788, 84, 85, 91256836, 92291092, 2084, 94386307, 147, 96516099, 32787, 98580739, 275, 148, 101726341, 149, 150, 6212, 6213, 22596, 6340, 6468, 71748, 6724, 6727, 113248321, 2148, 34851, 2339, 2212, 2340, 67620, 2596, 2342, 10403, 123732048, 43043, 10531, 10405, 10534, 2149, 34915, 2403, 67683, 2659, 2406, 34979, 2467, 67747, 2723, 139593891, 18726, 3235, 35107, 145752208, 2065, 16, 100387, 2066, 35363, 2067, 150997283, 2214, 4112, 6146, 2081, 10241, 48, 67875, 2113, 8208, 2082, 2851, 80, 1064976, 133411, 2084, 144, 3363, 264483, 17, 4128, 12288, 2470, 35110, 4160, 18, 100390, 2097184, 35367, 2342, 2343, 67878, 2854, 3366, 8224, 264486, 188772384, 51, 96, 52, 193986656, 16416, 115, 198181024, 160, 32800, 179, 201359392, 288, 202379328, 32819, 204472608, 307, 4114, 49, 4115, 310, 8209, 83, 85, 81, 16401, 211, 32851, 145, 339, 50, 65619, 595, 51, 147, 52, 32915, 403, 65683, 659, 230817939, 16662, 1171, 33043, 98323, 33299, 240124179, 8211, 82, 16402, 150, 65811, 146, 787, 83, 131347, 1299, 84, 262419, 85, 96, 160, 288, 16404, 147, 32787, 257978388, 52, 275, 12437, 148, 4180, 4181, 149, 20564, 150, 4308, 4436, 69716, 4692, 4695, 20758, 4246, 275775569, 116, 180, 308, 65588, 564, 145, 117, 16694, 182, 33335, 6160, 311, 24725, 291561493, 2096, 85, 24854, 10256, 8341, 8342, 2128, 18448, 41109, 8597, 2192, 8853, 139413, 9365, 6176, 3160064, 9368, 310378642, 6208, 213, 341, 2080, 597, 131157, 1109, 16726, 214, 33367, 10272, 343, 66648, 600, 2144, 16790, 49430, 18464, 329367574, 150, 2208, 34848, 49687, 16662, 2336, 16663, 82198, 17174, 17686, 278806, 341836051, 406, 662, 1174, 48, 262294, 33431, 407, 66712, 664, 0, 0, 0, 0, 80, 16400, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12304, 0, 0, 4176, 20496, 0, 0, 4240, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 16432, 0, 0, 176, 32816, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24592, 0, 0, 8336, 0, 0, 80, 0, 0, 0, 0, 0, 0, 16464, 0, 0, 0, 208, 0, 0, 32848, 0, 0, 336, 65616, 0, 0, 592, 0, 0, 0, 16528, 49168, 0, 0, 16656, 0, 0, 144, 0, 0, 0, 0, 0, 0, 32912, 0, 0, 0, 400, 0, 0, 65680, 0, 0, 656, 131216, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6162, 2097, 6163, 0, 10257, 48, 0, 2129, 18449, 0, 0, 2193, 0, 2098, 0, 80, 5259280, 0, 2100, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10259, 2130, 18450, 0, 0, 2194, 0, 2131, 0, 0, 2132, 0, 2133, 0, 0, 0, 18452, 2195, 34835, 0, 0, 2323, 0, 2196, 0, 0, 2197, 0, 2198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12304, 6178, 2081, 4176, 6311952, 0, 6180, 4240, 0, 10273, 8388656, 6210, 22530, 2145, 0, 6274, 18465, 6211, 0, 2209, 10520609, 0, 6213, 2337, 0, 0, 2082, 10305, 26625, 112, 0, 10369, 11550768, 0, 12585025, 176, 32816, 0, 0, 304, 0, 18497, 0, 0, 0, 2241, 0, 0, 34881, 0, 0, 2369, 67649, 0, 0, 2625, 0, 0, 0, 0, 13656080, 2146, 10276, 8336, 18466, 0, 80, 2210, 34850, 0, 0, 2338, 0, 14696528, 0, 0, 2148, 208, 2149, 0, 32848, 0, 0, 336, 65616, 0, 0, 592, 0, 0, 18468, 15745168, 16826384, 0, 0, 17842448, 0, 2212, 144, 0, 2213, 0, 2214, 0, 0, 32912, 34853, 2340, 67620, 400, 0, 2596, 65680, 2341, 0, 656, 22151312, 0, 2343, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12320, 0, 81, 16401, 4192, 0, 145, 20512, 0, 0, 4256, 36896, 0, 0, 4384, 0, 0, 0, 12352, 23097344, 0, 52, 12416, 0, 0, 4160, 0, 0, 0, 0, 0, 0, 20544, 0, 0, 0, 4288, 0, 0, 36928, 0, 0, 4416, 69696, 0, 0, 4672, 0, 0, 0, 0, 16402, 0, 0, 146, 0, 27263072, 0, 0, 84, 0, 85, 0, 0, 0, 16404, 28311712, 30441504, 0, 0, 32506144, 0, 148, 0, 0, 149, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24608, 0, 0, 8352, 40992, 0, 0, 8480, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 32864, 0, 0, 352, 65632, 0, 0, 608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49184, 0, 0, 16672, 0, 0, 160, 0, 0, 0, 0, 0, 0, 32928, 0, 0, 0, 416, 0, 0, 65696, 0, 0, 672, 131232, 0, 0, 1184, 0, 0, 0, 33056, 98336, 0, 0, 33312, 0, 0, 288, 0, 0, 0, 0, 0, 0, 65824, 0, 0, 0, 800, 0, 0, 131360, 0, 0, 1312, 262432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12307, 4178, 20498, 113, 0, 4242, 16433, 4179, 0, 177, 33587249, 0, 4181, 305, 0, 0, 20500, 4243, 36883, 0, 0, 4371, 0, 4244, 0, 0, 4245, 0, 4246, 0, 0, 0, 0, 0, 24593, 0, 0, 8337, 51, 0, 34603089, 0, 0, 0, 0, 0, 0, 16465, 0, 0, 0, 209, 0, 0, 32849, 0, 0, 337, 65617, 0, 0, 593, 0, 0, 0, 16529, 49169, 0, 0, 16657, 0, 0, 145, 0, 0, 0, 0, 0, 0, 32913, 0, 0, 0, 401, 0, 0, 65681, 0, 0, 657, 131217, 0, 0, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 16434, 0, 0, 178, 32818, 0, 0, 306, 0, 115, 0, 0, 116, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16436, 179, 32819, 0, 0, 307, 0, 180, 0, 0, 181, 0, 182, 0, 0, 0, 32821, 308, 65588, 0, 0, 564, 0, 309, 0, 0, 310, 0, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16466, 24596, 8339, 40979, 210, 0, 8467, 32850, 8340, 0, 338, 35717202, 0, 8342, 594, 0, 0, 83, 16530, 49170, 0, 0, 16658, 84, 0, 38797458, 0, 0, 0, 0, 0, 0, 32914, 0, 0, 0, 402, 0, 0, 65682, 0, 0, 658, 131218, 0, 0, 1170, 0, 0, 0, 0, 16468, 211, 16469, 0, 32851, 0, 0, 339, 65619, 0, 0, 595, 0, 212, 0, 0, 213, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32853, 340, 65620, 0, 0, 596, 0, 341, 0, 0, 342, 0, 343, 0, 0, 0, 65622, 597, 131157, 0, 0, 1109, 0, 598, 0, 0, 599, 0, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16532, 147, 0, 16533, 0, 16534, 0, 0, 32915, 49173, 16660, 81940, 403, 0, 16916, 65683, 16661, 0, 659, 39977107, 0, 16663, 1171, 0, 0, 148, 33043, 98323, 0, 0, 33299, 149, 0, 41943315, 0, 0, 0, 0, 0, 0, 65811, 0, 0, 0, 787, 0, 0, 131347, 0, 0, 1299, 262419, 0, 0, 0, 0, 0, 0, 0, 32917, 404, 32918, 0, 65684, 0, 0, 660, 131220, 0, 0, 1172, 0, 405, 0, 0, 406, 0, 407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65686, 661, 131221, 0, 0, 1173, 0, 662, 0, 0, 663, 0, 664, 0, 0, 0, 131223, 1174, 262294, 0, 0, 0, 0, 1175, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42991632, 0, 0, 6224, 22544, 0, 0, 6288, 0, 0, 2096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2160, 0, 0, 18480, 0, 0, 2224, 34864, 0, 0, 2352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26640, 0, 0, 10384, 0, 0, 2128, 0, 0, 0, 0, 0, 0, 18512, 0, 0, 0, 2256, 0, 0, 34896, 0, 0, 2384, 67664, 0, 0, 2640, 0, 0, 0, 18576, 51216, 0, 0, 18704, 0, 0, 2192, 0, 0, 0, 0, 0, 0, 34960, 0, 0, 0, 2448, 0, 0, 67728, 0, 0, 2704, 133264, 0, 0, 3216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45103136, 0, 0, 0, 6240, 0, 0, 22560, 0, 0, 6304, 38944, 0, 0, 6432, 0, 0, 0, 46151744, 47216640, 0, 0, 49297536, 0, 0, 6208, 0, 0, 0, 0, 0, 0, 22592, 0, 0, 0, 6336, 0, 0, 38976, 0, 0, 6464, 71744, 0, 0, 6720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2208, 34848, 0, 0, 2336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26656, 0, 0, 10400, 43040, 0, 0, 10528, 0, 0, 2144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2272, 0, 0, 34912, 0, 0, 2400, 67680, 0, 0, 2656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51232, 0, 0, 18720, 0, 0, 2208, 0, 0, 0, 0, 0, 0, 34976, 0, 0, 0, 2464, 0, 0, 67744, 0, 0, 2720, 133280, 0, 0, 3232, 0, 0, 0, 35104, 100384, 0, 0, 35360, 0, 0, 2336, 0, 0, 0, 0, 0, 0, 67872, 0, 0, 0, 2848, 0, 0, 133408, 0, 0, 3360, 264480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 16432, 0, 0, 176, 32816, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 16464, 0, 0, 0, 208, 0, 0, 32848, 0, 0, 336, 65616, 0, 0, 592, 0, 0, 0, 16528, 49168, 0, 0, 16656, 0, 0, 144, 0, 0, 0, 0, 0, 0, 32912, 0, 0, 0, 400, 0, 0, 65680, 0, 0, 656, 131216, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50360336, 0, 0, 12432, 0, 0, 4176, 0, 0, 0, 0, 0, 0, 20560, 0, 0, 0, 4304, 0, 0, 36944, 0, 0, 4432, 69712, 0, 0, 4688, 0, 0, 0, 20624, 53264, 0, 0, 20752, 0, 0, 4240, 0, 0, 0, 0, 0, 0, 37008, 0, 0, 0, 4496, 0, 0, 69776, 0, 0, 4752, 135312, 0, 0, 5264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 32816, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 32880, 0, 0, 368, 65648, 0, 0, 624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49200, 0, 0, 16688, 0, 0, 176, 0, 0, 0, 0, 0, 0, 32944, 0, 0, 0, 432, 0, 0, 65712, 0, 0, 688, 131248, 0, 0, 1200, 0, 0, 0, 33072, 98352, 0, 0, 33328, 0, 0, 304, 0, 0, 0, 0, 0, 0, 65840, 0, 0, 0, 816, 0, 0, 131376, 0, 0, 1328, 262448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24720, 52486160, 0, 0, 24848, 0, 0, 8336, 0, 0, 0, 0, 0, 0, 41104, 0, 0, 0, 8592, 0, 0, 73872, 0, 0, 8848, 139408, 0, 0, 9360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 65616, 0, 0, 592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49232, 0, 0, 16720, 82000, 0, 0, 16976, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 464, 0, 0, 65744, 0, 0, 720, 131280, 0, 0, 1232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98384, 0, 0, 33360, 0, 0, 336, 0, 0, 0, 0, 0, 0, 65872, 0, 0, 0, 848, 0, 0, 131408, 0, 0, 1360, 262480, 0, 0, 0, 0, 0, 0, 66128, 196688, 0, 0, 66640, 0, 0, 592, 0, 0, 0, 0, 0, 0, 131664, 0, 0, 0, 1616, 0, 0, 262736, 0, 0, 0, 524880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49296, 0, 0, 0, 16784, 0, 0, 82064, 0, 0, 17040, 147600, 0, 0, 17552, 0, 0, 0, 49424, 53592080, 0, 0, 49680, 0, 0, 16656, 0, 0, 0, 0, 0, 0, 82192, 0, 0, 0, 17168, 0, 0, 147728, 0, 0, 17680, 278800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 131216, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98448, 0, 0, 33424, 163984, 0, 0, 33936, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 912, 0, 0, 131472, 0, 0, 1424, 262544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196752, 0, 0, 66704, 0, 0, 656, 0, 0, 0, 0, 0, 0, 131728, 0, 0, 0, 1680, 0, 0, 262800, 0, 0, 0, 524944, 0, 0, 0, 0, 0, 0, 132240, 393360, 0, 0, 0, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 263312, 0, 0, 0, 0, 0, 0, 525456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54526000, 6226, 22546, 2161, 0, 6290, 18481, 6227, 0, 2225, 57706545, 0, 6229, 2353, 0, 0, 22548, 6291, 38931, 0, 0, 6419, 0, 6292, 0, 0, 6293, 0, 6294, 0, 0, 0, 0, 0, 26641, 112, 0, 10385, 59785264, 0, 60819537, 176, 32816, 0, 0, 304, 0, 18513, 0, 0, 0, 2257, 0, 0, 34897, 0, 0, 2385, 67665, 0, 0, 2641, 0, 0, 0, 18577, 51217, 0, 0, 18705, 0, 0, 2193, 0, 0, 0, 0, 0, 0, 34961, 0, 0, 0, 2449, 0, 0, 67729, 0, 0, 2705, 133265, 0, 0, 3217, 0, 0, 0, 0, 0, 0, 0, 0, 18482, 0, 80, 2226, 34866, 0, 0, 2354, 0, 63979600, 0, 0, 2164, 208, 2165, 0, 32848, 0, 0, 336, 65616, 0, 0, 592, 0, 0, 18484, 65028240, 67158032, 0, 0, 68174096, 0, 2228, 144, 0, 2229, 0, 2230, 0, 0, 32912, 34869, 2356, 67636, 400, 0, 2612, 65680, 2357, 0, 656, 69337232, 0, 2359, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18514, 26644, 10387, 43027, 2258, 0, 10515, 34898, 10388, 0, 2386, 70322258, 0, 10390, 2642, 0, 0, 2131, 18578, 51218, 0, 0, 18706, 2132, 0, 71305362, 0, 0, 0, 0, 0, 0, 34962, 0, 0, 0, 2450, 0, 0, 67730, 0, 0, 2706, 133266, 0, 0, 3218, 0, 0, 0, 0, 18516, 2259, 18517, 0, 34899, 0, 0, 2387, 67667, 0, 0, 2643, 0, 2260, 0, 0, 2261, 0, 2262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34901, 2388, 67668, 0, 0, 2644, 0, 2389, 0, 0, 2390, 0, 2391, 0, 0, 0, 67670, 2645, 133205, 0, 0, 3157, 0, 2646, 0, 0, 2647, 0, 2648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18580, 2195, 0, 18581, 0, 18582, 0, 0, 34963, 51221, 18708, 83988, 2451, 0, 18964, 67731, 18709, 0, 2707, 72485011, 0, 18711, 3219, 0, 0, 2196, 35091, 100371, 0, 0, 35347, 2197, 0, 73402643, 0, 0, 0, 0, 0, 0, 67859, 0, 0, 0, 2835, 0, 0, 133395, 0, 0, 3347, 264467, 0, 0, 0, 0, 0, 0, 0, 34965, 2452, 34966, 0, 67732, 0, 0, 2708, 133268, 0, 0, 3220, 0, 2453, 0, 0, 2454, 0, 2455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67734, 2709, 133269, 0, 0, 3221, 0, 2710, 0, 0, 2711, 0, 2712, 0, 0, 0, 133271, 3222, 264342, 0, 0, 0, 0, 3223, 0, 0, 3224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74477584, 6242, 77608996, 12432, 22562, 2145, 4176, 6306, 38946, 0, 0, 6434, 0, 78663760, 0, 2209, 79726625, 4304, 6245, 2337, 36944, 0, 0, 4432, 69712, 0, 0, 4688, 0, 0, 22564, 80760976, 81842192, 0, 0, 82858256, 0, 6308, 4240, 0, 6309, 0, 6310, 0, 0, 37008, 38949, 6436, 71716, 4496, 0, 6692, 69776, 6437, 0, 4752, 84021392, 0, 6439, 5264, 0, 0, 0, 0, 0, 0, 0, 0, 26657, 84934768, 6210, 10401, 87074849, 0, 89143365, 10529, 0, 22594, 90179681, 93323440, 95453232, 6338, 0, 97517872, 38978, 99629188, 0, 6466, 100735042, 0, 102774918, 6722, 0, 0, 6211, 22658, 55298, 2273, 0, 22786, 103843937, 0, 104863874, 2401, 67681, 0, 0, 2657, 0, 39042, 0, 0, 0, 6530, 0, 0, 71810, 0, 0, 6786, 137346, 0, 0, 7298, 0, 0, 0, 0, 105957409, 6339, 22597, 18721, 38979, 0, 2209, 6467, 71747, 0, 0, 6723, 0, 106989729, 0, 0, 6341, 2465, 6342, 0, 67745, 0, 0, 2721, 133281, 0, 0, 3233, 0, 0, 38981, 108038433, 109152289, 0, 0, 110135841, 0, 6469, 2337, 0, 6470, 0, 6471, 0, 0, 67873, 71750, 6725, 137285, 2849, 0, 7237, 133409, 6726, 0, 3361, 111413537, 0, 6728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26689, 112, 2210, 34850, 10433, 0, 2338, 43073, 0, 0, 10561, 75841, 0, 0, 10817, 0, 0, 0, 26753, 112257025, 240, 2149, 26881, 32880, 0, 10369, 368, 65648, 0, 0, 624, 0, 43137, 0, 0, 0, 10625, 0, 0, 75905, 0, 0, 10881, 141441, 0, 0, 11393, 0, 0, 0, 0, 114343984, 0, 0, 115360048, 0, 116394177, 176, 0, 2213, 0, 2214, 0, 0, 32944, 34853, 117442881, 118556737, 432, 0, 119540289, 65712, 2341, 0, 688, 120717488, 0, 2343, 1200, 0, 0, 0, 33072, 98352, 0, 0, 33328, 0, 0, 304, 0, 0, 0, 0, 0, 0, 65840, 0, 0, 0, 816, 0, 0, 131376, 0, 0, 1328, 262448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51265, 0, 0, 18753, 84033, 0, 0, 19009, 0, 0, 2241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2497, 0, 0, 67777, 0, 0, 2753, 133313, 0, 0, 3265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100417, 0, 0, 35393, 0, 0, 2369, 0, 0, 0, 0, 0, 0, 67905, 0, 0, 0, 2881, 0, 0, 133441, 0, 0, 3393, 264513, 0, 0, 0, 0, 0, 0, 68161, 198721, 0, 0, 68673, 0, 0, 2625, 0, 0, 0, 0, 0, 0, 133697, 0, 0, 0, 3649, 0, 0, 264769, 0, 0, 0, 526913, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26660, 121659536, 122740752, 2274, 0, 124805392, 34914, 10404, 8336, 2402, 125896802, 0, 10406, 2658, 0, 41104, 43045, 10532, 75812, 8592, 0, 10788, 73872, 10533, 0, 8848, 127017104, 0, 10535, 9360, 0, 0, 0, 0, 51234, 0, 0, 18722, 2148, 208, 127928482, 0, 0, 0, 0, 0, 0, 34978, 0, 336, 65616, 2466, 0, 592, 67746, 0, 0, 2722, 133282, 0, 0, 3234, 0, 0, 0, 35106, 100386, 0, 0, 35362, 0, 0, 2338, 0, 0, 0, 0, 0, 0, 67874, 0, 0, 0, 2850, 0, 0, 133410, 0, 0, 3362, 264482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129024080, 0, 0, 130040144, 131154000, 0, 0, 132137552, 0, 2276, 208, 0, 2277, 0, 2278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34917, 2404, 67684, 464, 0, 2660, 65744, 2405, 0, 720, 133300432, 0, 2407, 1232, 0, 0, 67686, 2661, 133221, 0, 0, 3173, 0, 2662, 0, 0, 2663, 0, 2664, 0, 0, 0, 0, 0, 98384, 0, 0, 33360, 0, 0, 336, 0, 0, 0, 0, 0, 0, 65872, 0, 0, 0, 848, 0, 0, 131408, 0, 0, 1360, 262480, 0, 0, 0, 0, 0, 0, 66128, 196688, 0, 0, 66640, 0, 0, 592, 0, 0, 0, 0, 0, 0, 131664, 0, 0, 0, 1616, 0, 0, 262736, 0, 0, 0, 524880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134267024, 51237, 18724, 84004, 135283088, 0, 18980, 136396944, 18725, 0, 137380496, 138559632, 0, 18727, 140526736, 0, 0, 2212, 141607184, 142721040, 0, 0, 147898896, 2213, 0, 149963024, 0, 0, 0, 0, 0, 0, 157368592, 0, 0, 0, 161497872, 0, 0, 164774160, 0, 0, 167789840, 169099536, 0, 0, 0, 0, 0, 0, 0, 34981, 2468, 34982, 0, 67748, 400, 0, 2724, 133284, 0, 0, 3236, 0, 2469, 0, 656, 173146256, 0, 2471, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67750, 2725, 133285, 0, 0, 3237, 0, 2726, 0, 0, 2727, 0, 2728, 0, 0, 0, 133287, 3238, 264358, 0, 0, 0, 0, 3239, 0, 0, 3240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98448, 35109, 2340, 33424, 174227600, 0, 35111, 33936, 0, 67876, 177209744, 35365, 165925, 2852, 0, 35877, 133412, 35366, 0, 3364, 179570980, 0, 35368, 0, 0, 0, 2341, 68132, 198692, 912, 0, 68644, 180486544, 0, 181406244, 1424, 262544, 0, 0, 0, 0, 133668, 0, 0, 0, 3620, 0, 0, 264740, 0, 0, 0, 526884, 0, 0, 0, 0, 0, 0, 0, 182648976, 2853, 67879, 66704, 133413, 0, 656, 3365, 264485, 0, 0, 0, 0, 183632528, 0, 0, 2855, 1680, 2856, 0, 262800, 0, 0, 0, 524944, 0, 0, 0, 0, 0, 133415, 184681616, 187039888, 0, 0, 0, 0, 3367, 1168, 0, 3368, 0, 0, 0, 0, 263312, 264488, 0, 526631, 0, 0, 0, 525456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 187695136, 0, 190840913, 12448, 45088, 0, 0, 12576, 0, 16465, 4192, 0, 0, 209, 0, 0, 32849, 0, 0, 337, 65617, 0, 0, 593, 0, 0, 0, 16529, 49169, 4320, 0, 16657, 36960, 0, 145, 4448, 69728, 0, 0, 4704, 0, 32913, 0, 0, 0, 401, 0, 0, 65681, 0, 0, 657, 131217, 0, 0, 1169, 0, 0, 0, 0, 53280, 0, 0, 20768, 0, 0, 4256, 0, 0, 0, 0, 0, 0, 37024, 0, 0, 0, 4512, 0, 0, 69792, 0, 0, 4768, 135328, 0, 0, 5280, 0, 0, 0, 37152, 102432, 0, 0, 37408, 0, 0, 4384, 0, 0, 0, 0, 0, 0, 69920, 0, 0, 0, 4896, 0, 0, 135456, 0, 0, 5408, 266528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191918144, 0, 0, 116, 12480, 117, 0, 45120, 0, 0, 12608, 77888, 0, 0, 12864, 0, 0, 16436, 195063936, 199290880, 0, 0, 203452672, 0, 180, 12416, 0, 181, 0, 182, 0, 0, 45184, 32821, 308, 65588, 12672, 0, 564, 77952, 309, 0, 12928, 208810112, 0, 311, 13440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4416, 69696, 0, 0, 4672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53312, 0, 0, 20800, 86080, 0, 0, 21056, 0, 0, 4288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4544, 0, 0, 69824, 0, 0, 4800, 135360, 0, 0, 5312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102464, 0, 0, 37440, 0, 0, 4416, 0, 0, 0, 0, 0, 0, 69952, 0, 0, 0, 4928, 0, 0, 135488, 0, 0, 5440, 266560, 0, 0, 0, 0, 0, 0, 70208, 200768, 0, 0, 70720, 0, 0, 4672, 0, 0, 0, 0, 0, 0, 135744, 0, 0, 0, 5696, 0, 0, 266816, 0, 0, 0, 528960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210763872, 16530, 49170, 0, 0, 16658, 84, 0, 211812498, 0, 0, 0, 0, 0, 0, 32914, 0, 0, 0, 402, 0, 0, 65682, 0, 0, 658, 131218, 0, 0, 1170, 0, 0, 0, 0, 16468, 214958304, 16469, 0, 216039520, 0, 0, 218104160, 220266592, 0, 0, 221250144, 0, 212, 0, 0, 213, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32853, 340, 65620, 0, 0, 596, 0, 341, 0, 0, 342, 0, 343, 0, 0, 0, 65622, 597, 131157, 0, 0, 1109, 0, 598, 0, 0, 599, 0, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16532, 223346848, 0, 16533, 0, 16534, 0, 0, 225476768, 49173, 16660, 81940, 226492832, 0, 16916, 227606688, 16661, 0, 228590240, 229769376, 0, 16663, 231736480, 0, 0, 148, 232816928, 233930784, 0, 0, 234914336, 149, 0, 235929888, 0, 0, 0, 0, 0, 0, 241238304, 0, 0, 0, 243270432, 0, 0, 245498144, 0, 0, 246416672, 248774944, 0, 0, 0, 0, 0, 0, 0, 32917, 404, 32918, 0, 65684, 0, 0, 660, 131220, 0, 0, 1172, 0, 405, 0, 0, 406, 0, 407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65686, 661, 131221, 0, 0, 1173, 0, 662, 0, 0, 663, 0, 664, 0, 0, 0, 131223, 1174, 262294, 0, 0, 0, 0, 1175, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250667040, 0, 0, 24864, 0, 0, 8352, 0, 0, 0, 0, 0, 0, 41120, 0, 0, 0, 8608, 0, 0, 73888, 0, 0, 8864, 139424, 0, 0, 9376, 0, 0, 0, 41248, 106528, 0, 0, 41504, 0, 0, 8480, 0, 0, 0, 0, 0, 0, 74016, 0, 0, 0, 8992, 0, 0, 139552, 0, 0, 9504, 270624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352, 65632, 0, 0, 608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 480, 0, 0, 65760, 0, 0, 736, 131296, 0, 0, 1248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98400, 0, 0, 33376, 0, 0, 352, 0, 0, 0, 0, 0, 0, 65888, 0, 0, 0, 864, 0, 0, 131424, 0, 0, 1376, 262496, 0, 0, 0, 0, 0, 0, 66144, 196704, 0, 0, 66656, 0, 0, 608, 0, 0, 0, 0, 0, 0, 131680, 0, 0, 0, 1632, 0, 0, 262752, 0, 0, 0, 524896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49440, 251772960, 0, 0, 49696, 0, 0, 16672, 0, 0, 0, 0, 0, 0, 82208, 0, 0, 0, 17184, 0, 0, 147744, 0, 0, 17696, 278816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672, 131232, 0, 0, 1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98464, 0, 0, 33440, 164000, 0, 0, 33952, 0, 0, 416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 928, 0, 0, 131488, 0, 0, 1440, 262560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196768, 0, 0, 66720, 0, 0, 672, 0, 0, 0, 0, 0, 0, 131744, 0, 0, 0, 1696, 0, 0, 262816, 0, 0, 0, 524960, 0, 0, 0, 0, 0, 0, 132256, 393376, 0, 0, 0, 0, 0, 1184, 0, 0, 0, 0, 0, 0, 263328, 0, 0, 0, 0, 0, 0, 525472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98592, 0, 0, 0, 33568, 0, 0, 164128, 0, 0, 34080, 295200, 0, 0, 0, 0, 0, 0, 98848, 252936224, 0, 0, 99360, 0, 0, 33312, 0, 0, 0, 0, 0, 0, 164384, 0, 0, 0, 34336, 0, 0, 295456, 0, 0, 0, 557600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1312, 262432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196896, 0, 0, 66848, 327968, 0, 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1824, 0, 0, 262944, 0, 0, 0, 525088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393504, 0, 0, 0, 0, 0, 1312, 0, 0, 0, 0, 0, 0, 263456, 0, 0, 0, 0, 0, 0, 525600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20562, 256901233, 12435, 45075, 4306, 0, 12563, 36946, 12436, 0, 4434, 260116562, 0, 12438, 4690, 0, 0, 4179, 20626, 53266, 241, 0, 20754, 262176881, 0, 263196818, 369, 65649, 0, 0, 625, 0, 37010, 0, 0, 0, 4498, 0, 0, 69778, 0, 0, 4754, 135314, 0, 0, 5266, 0, 0, 0, 0, 265338929, 4307, 20565, 16689, 36947, 0, 177, 4435, 69715, 0, 0, 4691, 0, 267419825, 0, 0, 4309, 433, 4310, 0, 65713, 0, 0, 689, 131249, 0, 0, 1201, 0, 0, 36949, 268468529, 269582385, 0, 0, 270565937, 0, 4437, 305, 0, 4438, 0, 4439, 0, 0, 65841, 69718, 4693, 135253, 817, 0, 5205, 131377, 4694, 0, 1329, 271843633, 0, 4696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20628, 4243, 0, 20629, 0, 20630, 0, 0, 37011, 53269, 20756, 86036, 4499, 0, 21012, 69779, 20757, 0, 4755, 272765075, 0, 20759, 5267, 0, 0, 4244, 37139, 102419, 0, 0, 37395, 4245, 0, 273682707, 0, 0, 0, 0, 0, 0, 69907, 0, 0, 0, 4883, 0, 0, 135443, 0, 0, 5395, 266515, 0, 0, 0, 0, 0, 0, 0, 37013, 4500, 37014, 0, 69780, 0, 0, 4756, 135316, 0, 0, 5268, 0, 4501, 0, 0, 4502, 0, 4503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69782, 4757, 135317, 0, 0, 5269, 0, 4758, 0, 0, 4759, 0, 4760, 0, 0, 0, 135319, 5270, 266390, 0, 0, 0, 0, 5271, 0, 0, 5272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24721, 274784273, 0, 117, 24849, 0, 0, 8337, 0, 0, 0, 0, 0, 0, 41105, 0, 0, 0, 8593, 0, 0, 73873, 0, 0, 8849, 139409, 0, 0, 9361, 0, 0, 0, 0, 32819, 0, 0, 307, 0, 276824273, 0, 0, 181, 0, 182, 0, 0, 0, 32821, 277872977, 278986833, 0, 0, 279970385, 0, 309, 0, 0, 310, 0, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49233, 0, 0, 16721, 82001, 0, 0, 16977, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 465, 0, 0, 65745, 0, 0, 721, 131281, 0, 0, 1233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98385, 0, 0, 33361, 0, 0, 337, 0, 0, 0, 0, 0, 0, 65873, 0, 0, 0, 849, 0, 0, 131409, 0, 0, 1361, 262481, 0, 0, 0, 0, 0, 0, 66129, 196689, 0, 0, 66641, 0, 0, 593, 0, 0, 0, 0, 0, 0, 131665, 0, 0, 0, 1617, 0, 0, 262737, 0, 0, 0, 524881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49297, 0, 0, 0, 16785, 0, 0, 82065, 0, 0, 17041, 147601, 0, 0, 17553, 0, 0, 0, 49425, 281133073, 0, 0, 49681, 0, 0, 16657, 0, 0, 0, 0, 0, 0, 82193, 0, 0, 0, 17169, 0, 0, 147729, 0, 0, 17681, 278801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 657, 131217, 0, 0, 1169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98449, 0, 0, 33425, 163985, 0, 0, 33937, 0, 0, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 913, 0, 0, 131473, 0, 0, 1425, 262545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196753, 0, 0, 66705, 0, 0, 657, 0, 0, 0, 0, 0, 0, 131729, 0, 0, 0, 1681, 0, 0, 262801, 0, 0, 0, 524945, 0, 0, 0, 0, 0, 0, 132241, 393361, 0, 0, 0, 0, 0, 1169, 0, 0, 0, 0, 0, 0, 263313, 0, 0, 0, 0, 0, 0, 525457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49202, 0, 0, 16690, 116, 0, 282067122, 0, 0, 0, 0, 0, 0, 32946, 0, 0, 0, 434, 0, 0, 65714, 0, 0, 690, 131250, 0, 0, 1202, 0, 0, 0, 33074, 98354, 0, 0, 33330, 0, 0, 306, 0, 0, 0, 0, 0, 0, 65842, 0, 0, 0, 818, 0, 0, 131378, 0, 0, 1330, 262450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32883, 0, 0, 371, 65651, 0, 0, 627, 0, 244, 0, 0, 245, 0, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32885, 372, 65652, 0, 0, 628, 0, 373, 0, 0, 374, 0, 375, 0, 0, 0, 65654, 629, 131189, 0, 0, 1141, 0, 630, 0, 0, 631, 0, 632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32947, 49205, 16692, 81972, 435, 0, 16948, 65715, 16693, 0, 691, 283246771, 0, 16695, 1203, 0, 0, 180, 33075, 98355, 0, 0, 33331, 181, 0, 284164403, 0, 0, 0, 0, 0, 0, 65843, 0, 0, 0, 819, 0, 0, 131379, 0, 0, 1331, 262451, 0, 0, 0, 0, 0, 0, 0, 32949, 436, 32950, 0, 65716, 0, 0, 692, 131252, 0, 0, 1204, 0, 437, 0, 0, 438, 0, 439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65718, 693, 131253, 0, 0, 1205, 0, 694, 0, 0, 695, 0, 696, 0, 0, 0, 131255, 1206, 262326, 0, 0, 0, 0, 1207, 0, 0, 1208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33077, 308, 0, 33078, 0, 33079, 0, 0, 65844, 98358, 33333, 163893, 820, 0, 33845, 131380, 33334, 0, 1332, 285475124, 0, 33336, 0, 0, 0, 309, 66100, 196660, 0, 0, 66612, 310, 0, 287310388, 0, 0, 0, 0, 0, 0, 131636, 0, 0, 0, 1588, 0, 0, 262708, 0, 0, 0, 524852, 0, 0, 0, 0, 0, 0, 0, 65846, 821, 65847, 0, 131381, 0, 0, 1333, 262453, 0, 0, 0, 0, 822, 0, 0, 823, 0, 824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131383, 1334, 262454, 0, 0, 0, 0, 1335, 0, 0, 1336, 0, 0, 0, 0, 0, 262456, 0, 524599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49234, 24724, 8339, 16722, 288440402, 0, 24726, 16978, 0, 41107, 289407186, 24852, 90132, 8595, 0, 25108, 73875, 24853, 0, 8851, 292692115, 0, 24855, 9363, 0, 0, 8340, 41235, 106515, 466, 0, 41491, 294715602, 0, 295706899, 722, 131282, 0, 0, 1234, 0, 74003, 0, 0, 0, 8979, 0, 0, 139539, 0, 0, 9491, 270611, 0, 0, 0, 0, 0, 0, 0, 298942546, 8596, 41110, 33362, 73876, 0, 338, 8852, 139412, 0, 0, 9364, 0, 299958610, 0, 0, 8598, 850, 8599, 0, 131410, 0, 0, 1362, 262482, 0, 0, 0, 0, 0, 73878, 302056018, 303235154, 0, 0, 304153682, 0, 8854, 594, 0, 8855, 0, 8856, 0, 0, 131666, 139415, 9366, 270486, 1618, 0, 0, 262738, 9367, 0, 0, 307757650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49298, 0, 339, 65619, 16786, 0, 595, 82066, 0, 0, 17042, 147602, 0, 0, 17554, 0, 0, 0, 49426, 308396050, 0, 214, 49682, 0, 0, 16658, 0, 0, 0, 0, 0, 0, 82194, 0, 0, 0, 17170, 0, 0, 147730, 0, 0, 17682, 278802, 0, 0, 0, 0, 0, 0, 0, 65620, 0, 0, 596, 0, 311427474, 0, 0, 342, 0, 343, 0, 0, 0, 65622, 313524882, 314704018, 0, 0, 315622546, 0, 598, 0, 0, 599, 0, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98450, 0, 0, 33426, 163986, 0, 0, 33938, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 914, 0, 0, 131474, 0, 0, 1426, 262546, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196754, 0, 0, 66706, 0, 0, 658, 0, 0, 0, 0, 0, 0, 131730, 0, 0, 0, 1682, 0, 0, 262802, 0, 0, 0, 524946, 0, 0, 0, 0, 0, 0, 132242, 393362, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 263314, 0, 0, 0, 0, 0, 0, 525458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49237, 16724, 82004, 467, 0, 16980, 65747, 16725, 0, 723, 316801235, 0, 16727, 1235, 0, 0, 82006, 16981, 147541, 0, 0, 17493, 0, 16982, 0, 0, 16983, 0, 16984, 0, 0, 0, 0, 0, 98387, 0, 0, 33363, 213, 0, 317718867, 0, 0, 0, 0, 0, 0, 65875, 0, 0, 0, 851, 0, 0, 131411, 0, 0, 1363, 262483, 0, 0, 0, 0, 0, 0, 66131, 196691, 0, 0, 66643, 0, 0, 595, 0, 0, 0, 0, 0, 0, 131667, 0, 0, 0, 1619, 0, 0, 262739, 0, 0, 0, 524883, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65748, 0, 0, 724, 131284, 0, 0, 1236, 0, 469, 0, 0, 470, 0, 471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65750, 725, 131285, 0, 0, 1237, 0, 726, 0, 0, 727, 0, 728, 0, 0, 0, 131287, 1238, 262358, 0, 0, 0, 0, 1239, 0, 0, 1240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65876, 98390, 33365, 163925, 852, 0, 33877, 131412, 33366, 0, 1364, 319029588, 0, 33368, 0, 0, 0, 341, 66132, 196692, 0, 0, 66644, 342, 0, 320864852, 0, 0, 0, 0, 0, 0, 131668, 0, 0, 0, 1620, 0, 0, 262740, 0, 0, 0, 524884, 0, 0, 0, 0, 0, 0, 0, 65878, 853, 65879, 0, 131413, 0, 0, 1365, 262485, 0, 0, 0, 0, 854, 0, 0, 855, 0, 856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131415, 1366, 262486, 0, 0, 0, 0, 1367, 0, 0, 1368, 0, 0, 0, 0, 0, 262488, 0, 524631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66134, 597, 0, 66135, 0, 66136, 0, 0, 131669, 196695, 66646, 327766, 1621, 0, 0, 262741, 66647, 0, 0, 322437717, 0, 0, 0, 0, 0, 598, 132181, 393301, 0, 0, 0, 599, 0, 322962517, 0, 0, 0, 0, 0, 0, 263253, 0, 0, 0, 0, 0, 0, 525397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131671, 1622, 131672, 0, 262742, 0, 0, 0, 524886, 0, 0, 0, 0, 1623, 0, 0, 1624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262744, 0, 524887, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49301, 16788, 49302, 0, 82068, 403, 0, 17044, 147604, 0, 0, 17556, 0, 16789, 0, 659, 325189779, 0, 16791, 1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82070, 17045, 147605, 0, 0, 17557, 0, 17046, 0, 0, 17047, 0, 17048, 0, 0, 0, 147607, 17558, 278678, 0, 0, 0, 0, 17559, 0, 0, 17560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98451, 49429, 16660, 33427, 326271123, 0, 49431, 33939, 0, 82196, 328204691, 49685, 180245, 17172, 0, 50197, 147732, 49686, 0, 17684, 332677396, 0, 49688, 0, 0, 0, 16661, 82452, 213012, 915, 0, 82964, 333578643, 0, 335561236, 1427, 262547, 0, 0, 0, 0, 147988, 0, 0, 0, 17940, 0, 0, 279060, 0, 0, 0, 541204, 0, 0, 0, 0, 0, 0, 0, 336789651, 17173, 82199, 66707, 147733, 0, 659, 17685, 278805, 0, 0, 0, 0, 337773203, 0, 0, 17175, 1683, 17176, 0, 262803, 0, 0, 0, 524947, 0, 0, 0, 0, 0, 147735, 338822291, 340131987, 0, 0, 0, 0, 17687, 1171, 0, 17688, 0, 0, 0, 0, 263315, 278808, 0, 540951, 0, 0, 0, 525459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98579, 0, 660, 131220, 33555, 0, 1172, 164115, 0, 0, 34067, 295187, 0, 0, 0, 0, 0, 0, 98835, 341016595, 0, 407, 99347, 0, 0, 33299, 0, 0, 0, 0, 0, 0, 164371, 0, 0, 0, 34323, 0, 0, 295443, 0, 0, 0, 557587, 0, 0, 0, 0, 0, 0, 0, 131221, 0, 0, 1173, 0, 342885139, 0, 0, 663, 0, 664, 0, 0, 0, 131223, 343934227, 346292499, 0, 0, 0, 0, 1175, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196883, 0, 0, 66835, 327955, 0, 0, 0, 0, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811, 0, 0, 262931, 0, 0, 0, 525075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 393491, 0, 0, 0, 0, 0, 1299, 0, 0, 0, 0, 0, 0, 263443, 0, 0, 0, 0, 0, 0, 525587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98454, 33429, 163989, 916, 0, 33941, 131476, 33430, 0, 1428, 347341204, 0, 33432, 0, 0, 0, 163991, 33942, 295062, 0, 0, 0, 0, 33943, 0, 0, 33944, 0, 0, 0, 0, 0, 0, 0, 196756, 0, 0, 66708, 406, 0, 348127892, 0, 0, 0, 0, 0, 0, 131732, 0, 0, 0, 1684, 0, 0, 262804, 0, 0, 0, 524948, 0, 0, 0, 0, 0, 0, 132244, 393364, 0, 0, 0, 0, 0, 1172, 0, 0, 0, 0, 0, 0, 263316, 0, 0, 0, 0, 0, 0, 525460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131477, 0, 0, 1429, 262549, 0, 0, 0, 0, 918, 0, 0, 919, 0, 920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131479, 1430, 262550, 0, 0, 0, 0, 1431, 0, 0, 1432, 0, 0, 0, 0, 0, 262552, 0, 524695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131733, 196759, 66710, 327830, 1685, 0, 0, 262805, 66711, 0, 0, 349700757, 0, 0, 0, 0, 0, 662, 132245, 393365, 0, 0, 0, 663, 0, 350225557, 0, 0, 0, 0, 0, 0, 263317, 0, 0, 0, 0, 0, 0, 525461, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131735, 1686, 131736, 0, 262806, 0, 0, 0, 524950, 0, 0, 0, 0, 1687, 0, 0, 1688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262808, 0, 524951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132247, 1174, 0, 132248, 0, 0, 0, 0, 263318, 393368, 0, 655511, 0, 0, 0, 525462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1175, 0, 786582, 0, 0, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 263320, 0, 0, 0, 525463]
        , dtype=jnp.int32,
    )
    # fmt: on

    断么九 = 0
    平和 = 1

    MAX_PATTERNS = 4

    @staticmethod
    @jit
    def head(code: int) -> int:
        return code & 0b1111

    @staticmethod
    @jit
    def chow(code: int) -> int:
        return Yaku.CACHE_SUITED[code] >> 4 & 0b1111111

    @staticmethod
    @jit
    def pung(code: int) -> int:
        return Yaku.CACHE_SUITED[code] >> 11 & 0b111111111

    @staticmethod
    @jit
    def next(code: int) -> int:
        next = Yaku.CACHE_SUITED[code] >> 20
        return next | (next == 0) * code

    @staticmethod
    @jit
    def is_pinfu(code: int, begin: int, end: int, last: int) -> bool:
        len = end - begin
        left = Yaku.chow(code)
        right = Yaku.chow(code) << 3
        open_end = (left ^ (left & 1) * (begin % 9 == 0)) << 2 | (
            right ^ (right >> len & 1) * (end % 9 == 0) << len
        ) >> 3
        pos = last - begin
        return jax.lax.cond(
            (0 <= pos) & (pos < len),
            lambda: (open_end >> pos & 1) == 1,
            lambda: True,
        ) & (Yaku.pung(code) == 0)

    @staticmethod
    @jit
    def judge(
        hand: jnp.ndarray,
        melds: jnp.ndarray,
        meld_num: int,
        last: int,
    ) -> jnp.ndarray:
        # assert Hand.can_tsumo(hand)

        pinfu = jnp.full(
            Yaku.MAX_PATTERNS,
            (meld_num == 0)
            & jnp.all(hand[28:31] < 3)
            & (hand[27] == 0)
            & jnp.all(hand[31:34] == 0),
        )
        # NOTE: 南,西,北: オタ風扱い

        for suit in range(3):
            code = 0
            begin = 9 * suit
            for tile in range(9 * suit, 9 * (suit + 1)):
                print(pinfu, code)
                code, pinfu, begin = jax.lax.cond(
                    hand[tile] == 0,
                    lambda: (
                        0,
                        jax.lax.fori_loop(
                            0,
                            Yaku.MAX_PATTERNS,
                            lambda i, tpl: (
                                Yaku.next(tpl[0]),
                                tpl[1]
                                .at[i]
                                .set(
                                    tpl[1][i]
                                    & Yaku.is_pinfu(tpl[0], begin, tile, last)
                                ),
                            ),
                            (code, pinfu),
                        )[1],
                        tile + 1,
                    ),
                    lambda: (
                        ((code << 1) + 1) << (hand[tile].astype(int) - 1),
                        pinfu,
                        begin,
                    ),
                )

            pinfu = jax.lax.fori_loop(
                0,
                Yaku.MAX_PATTERNS,
                lambda i, tpl: (
                    Yaku.next(tpl[0]),
                    tpl[1]
                    .at[i]
                    .set(
                        tpl[1][i]
                        & Yaku.is_pinfu(tpl[0], begin, 9 * (suit + 1), last)
                    ),
                ),
                (code, pinfu),
            )[1]

        yaku = jnp.full(2, False)
        yaku = yaku.at[Yaku.平和].set(jnp.any(pinfu))

        flatten = Yaku.flatten(hand, melds, meld_num)
        return yaku.at[Yaku.断么九].set(Yaku._is_tanyao(flatten))

    @staticmethod
    @jit
    def flatten(
        hand: jnp.ndarray, melds: jnp.ndarray, meld_num: int
    ) -> jnp.ndarray:
        return jax.lax.fori_loop(
            0, meld_num, lambda i, arr: Yaku._flatten(arr, melds[i]), hand
        )

    @staticmethod
    @jit
    def _flatten(hand: jnp.ndarray, meld: int) -> jnp.ndarray:
        target, action = Meld.target(meld), Meld.action(meld)
        return jax.lax.switch(
            action - Action.PON,
            [
                lambda: Hand.add(hand, target, 3),
                lambda: Hand.add(
                    Hand.add(Hand.add(hand, target - 2), target - 1), target
                ),
                lambda: Hand.add(
                    Hand.add(Hand.add(hand, target - 1), target + 1), target
                ),
                lambda: Hand.add(
                    Hand.add(Hand.add(hand, target + 1), target + 2), target
                ),
            ],
        )

    @staticmethod
    @jit
    def _is_tanyao(hand: jnp.ndarray) -> bool:
        return (
            (hand[0] == 0)
            & (hand[8] == 0)
            & (hand[9] == 0)
            & (hand[17] == 0)
            & (hand[18] == 0)
            & (hand[26] == 0)
            & (hand[27] == 0)
            & (hand[28] == 0)
            & (hand[29] == 0)
            & (hand[39] == 0)
            & (hand[31] == 0)
            & (hand[32] == 0)
            & (hand[33] == 0)
        )


@dataclass
class State:
    deck: Deck
    hand: jnp.ndarray
    turn: int  # 手牌が3n+2枚, もしくは直前に牌を捨てたplayer
    target: int  # 直前に捨てられてron,pon,chi の対象になっている牌. 存在しなければ-1
    last_draw: int  # 手牌が3n+2枚のplayerが直前に引いた牌. 存在しなければ-1
    riichi_declared: bool  # state.turn がリーチ宣言してから, その直後の打牌が通るまでTrue
    riichi: jnp.ndarray  # 各playerのリーチが成立しているかどうか
    meld_num: jnp.ndarray  # 各playerの副露回数
    melds: jnp.ndarray
    # melds[i][j]: player i のj回目の副露(j=1,2,3,4). 存在しなければ0

    # reward:
    # - player0 がplayer1 からロン => [ 2,-2, 0, 0]
    # - player0 がツモ             => [ 2,-2,-2,-2]
    # - 流局時 全員聴牌            => [ 1, 1, 1, 1]
    # - 流局時 全員ノー聴          => [-1,-1,-1,-1]
    # - 流局時 player0 だけ聴牌    => [ 1,-1,-1,-1]

    @jit
    def legal_actions(self) -> jnp.ndarray:
        legal_actions = jnp.full((4, 43), False)

        # リーチ
        legal_actions = jax.lax.cond(
            (self.last_draw == -1)
            | self.riichi_declared
            | self.riichi[self.turn]
            | (self.deck.size() < 4)
            # | (jnp.sum(self.hand[self.turn]) < 14),
            | (self.meld_num[self.turn]),
            lambda: legal_actions,
            lambda: legal_actions.at[(self.turn, Action.RIICHI)].set(
                Hand.can_riichi(self.hand[self.turn])
            ),
        )

        # リーチ宣言直後の打牌
        legal_actions = jax.lax.cond(
            (self.last_draw != -1) & self.riichi_declared,
            lambda arr: jax.lax.fori_loop(
                0,
                34,
                lambda i, arr: arr.at[(self.turn, i)].set(
                    jax.lax.cond(
                        self.hand[self.turn][i] > (i == self.last_draw),
                        lambda: Hand.is_tenpai(
                            Hand.sub(self.hand[self.turn], i)
                        ),
                        lambda: False,
                    )
                ),
                arr,
            )
            .at[(self.turn, Action.TSUMOGIRI)]
            .set(
                Hand.is_tenpai(Hand.sub(self.hand[self.turn], self.last_draw))
            ),
            lambda arr: arr,
            legal_actions,
        )

        # ツモ切り, ツモ
        legal_actions = jax.lax.cond(
            (self.last_draw == -1) | self.riichi_declared,
            lambda: legal_actions,
            lambda: legal_actions.at[(self.turn, Action.TSUMOGIRI)]
            .set(True)
            .at[(self.turn, Action.TSUMO)]
            .set(Hand.can_tsumo(self.hand[self.turn])),
        )

        # 手出し, 鳴いた後の手出し
        legal_actions = jax.lax.cond(
            (self.target != -1)
            | self.riichi_declared
            | self.riichi[self.turn],
            lambda arr: arr,
            lambda arr: jax.lax.fori_loop(
                0,
                34,
                lambda i, arr: arr.at[(self.turn, i)].set(
                    self.hand[self.turn][i] > (i == self.last_draw),
                ),
                arr,
            ),
            legal_actions,
        )

        for player in range(4):
            # ロン
            legal_actions = jax.lax.cond(
                (self.target == -1) | (player == self.turn),
                lambda: legal_actions,
                lambda: legal_actions.at[(player, Action.RON)].set(
                    Hand.can_ron(self.hand[player], self.target)
                ),
            )
            # ポン
            legal_actions = jax.lax.cond(
                (self.target == -1)
                | (player == self.turn)
                | self.deck.is_empty()
                | self.riichi[player],
                lambda: legal_actions,
                lambda: legal_actions.at[(player, Action.PON)].set(
                    Hand.can_pon(self.hand[player], self.target)
                ),
            )
            # チー
            legal_actions = jax.lax.cond(
                (self.target == -1)
                | (player != (self.turn + 1) % 4)
                | self.deck.is_empty()
                | self.riichi[player],
                lambda: legal_actions,
                lambda: legal_actions.at[(player, Action.CHI_R)]
                .set(
                    Hand.can_chi(self.hand[player], self.target, Action.CHI_R)
                )
                .at[(player, Action.CHI_M)]
                .set(
                    Hand.can_chi(self.hand[player], self.target, Action.CHI_M)
                )
                .at[(player, Action.CHI_L)]
                .set(
                    Hand.can_chi(self.hand[player], self.target, Action.CHI_L)
                ),
            )
            legal_actions = legal_actions.at[(player, Action.PASS)].set(
                (player != self.turn) & jnp.any(legal_actions[player])
            )

        return legal_actions

    def observe(self, player: int) -> Observation:
        return Observation(self.hand[player], self.target, self.last_draw)

    @staticmethod
    @jit
    def init(key) -> State:
        deck = Deck.init(key)
        hand = jnp.zeros((4, 34), dtype=jnp.uint8)

        for i in range(4):
            for _ in range(13):
                deck, tile = Deck.draw(deck)
                hand = hand.at[i].set(Hand.add(hand[i], tile))

        deck, tile = Deck.draw(deck)
        hand = hand.at[0].set(Hand.add(hand[0], tile))

        turn = 0
        target = -1
        last_draw = tile
        riichi_declared = False
        riichi = jnp.full(4, False)
        meld_num = jnp.zeros(4, dtype=jnp.uint8)
        melds = jnp.zeros((4, 4), dtype=jnp.uint32)
        return State(
            deck,
            hand,
            turn,
            target,
            last_draw,
            riichi_declared,
            riichi,
            meld_num,
            melds,
        )

    @staticmethod
    @jit
    def step(
        state: State, actions: jnp.ndarray
    ) -> tuple[State, jnp.ndarray, bool]:
        player = jnp.argmin(actions)
        return State._step(state, player, actions[player])

    @staticmethod
    @jit
    def _step(
        state: State, player: int, action: int
    ) -> tuple[State, jnp.ndarray, bool]:
        return jax.lax.cond(
            action < 34,
            lambda: State._discard(state, action),
            lambda: jax.lax.switch(
                action - 34,
                [
                    lambda: State._tsumogiri(state),
                    lambda: State._riichi(state),
                    lambda: State._tsumo(state),
                    lambda: State._ron(state, player),
                    lambda: State._pon(state, player),
                    lambda: State._chi(state, player, Action.CHI_R),
                    lambda: State._chi(state, player, Action.CHI_M),
                    lambda: State._chi(state, player, Action.CHI_L),
                    lambda: State._try_draw(state),
                ],
            ),
        )

    @staticmethod
    @jit
    def _tsumogiri(state: State) -> tuple[State, jnp.ndarray, bool]:
        return State._discard(state, state.last_draw)

    @staticmethod
    @jit
    def _discard(state: State, tile: int) -> tuple[State, jnp.ndarray, bool]:
        state.hand = state.hand.at[state.turn].set(
            Hand.sub(state.hand[state.turn], tile)
        )
        state.target = tile
        state.last_draw = -1
        return jax.lax.cond(
            jnp.any(state.legal_actions()),
            lambda: (state, jnp.full(4, 0), False),
            lambda: State._try_draw(state),
        )

    @staticmethod
    @jit
    def _try_draw(state: State) -> tuple[State, jnp.ndarray, bool]:
        state.target = -1
        return jax.lax.cond(
            state.deck.is_empty(),
            lambda: State._ryukyoku(state),
            lambda: State._draw(state),
        )

    @staticmethod
    @jit
    def _accept_riichi(state: State) -> State:
        state.riichi = state.riichi.at[state.turn].set(
            state.riichi[state.turn] | state.riichi_declared
        )
        state.riichi_declared = False
        return state

    @staticmethod
    @jit
    def _draw(state: State) -> tuple[State, jnp.ndarray, bool]:
        state = State._accept_riichi(state)
        state.turn += 1
        state.turn %= 4
        state.deck, tile = Deck.draw(state.deck)
        state.last_draw = tile
        state.hand = state.hand.at[state.turn].set(
            Hand.add(state.hand[state.turn], tile)
        )
        return state, jnp.full(4, 0), False

    @staticmethod
    @jit
    def _ryukyoku(state: State) -> tuple[State, jnp.ndarray, bool]:
        reward = jnp.array(
            [2 * Hand.is_tenpai(state.hand[i]) - 1 for i in range(4)]
        )
        return state, reward, True

    @staticmethod
    @jit
    def _ron(state: State, player: int) -> tuple[State, jnp.ndarray, bool]:
        return (
            state,
            jnp.full(4, 0).at[state.turn].set(-2).at[player].set(2),
            True,
        )

    @staticmethod
    @jit
    def _append_meld(state: State, meld: int, player: int) -> State:
        state.melds = state.melds.at[(player, state.meld_num[player])].set(
            meld
        )
        state.meld_num = state.meld_num.at[player].set(
            state.meld_num[player] + 1
        )
        return state

    @staticmethod
    @jit
    def _pon(state: State, player: int) -> tuple[State, jnp.ndarray, bool]:
        state = State._accept_riichi(state)
        meld = Meld.init(Action.PON, state.target, state.turn)
        state = State._append_meld(state, meld, player)
        state.hand = state.hand.at[player].set(
            Hand.pon(state.hand[player], state.target)
        )
        state.target = -1
        state.turn = player
        return state, jnp.full(4, 0), False

    @staticmethod
    @jit
    def _chi(
        state: State, player: int, action: int
    ) -> tuple[State, jnp.ndarray, bool]:
        state = State._accept_riichi(state)
        meld = Meld.init(action, state.target, state.turn)
        state = State._append_meld(state, meld, player)
        state.hand = state.hand.at[player].set(
            Hand.chi(state.hand[player], state.target, action)
        )
        state.target = -1
        state.turn = player
        return state, jnp.full(4, 0), False

    @staticmethod
    @jit
    def _tsumo(state: State) -> tuple[State, jnp.ndarray, bool]:
        return state, jnp.full(4, -2).at[state.turn].set(2), True

    @staticmethod
    @jit
    def _riichi(state: State) -> tuple[State, jnp.ndarray, bool]:
        state.riichi_declared = True
        return state, jnp.full(4, 0), False

    def _tree_flatten(self):
        children = (
            self.deck,
            self.hand,
            self.turn,
            self.target,
            self.last_draw,
            self.riichi_declared,
            self.riichi,
            self.meld_num,
            self.melds,
        )
        aux_data = {}
        return (children, aux_data)

    @classmethod
    def _tree_unflatten(cls, aux_data, children):
        return cls(*children, **aux_data)


tree_util.register_pytree_node(
    State, State._tree_flatten, State._tree_unflatten
)


@jit
def init(key) -> State:
    return State.init(key)


@jit
def step(
    state: State, actions: jnp.ndarray
) -> tuple[State, jnp.ndarray, bool]:
    return State.step(state, actions)
